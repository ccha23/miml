{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Variational AutoEncoder (VAE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\def\\abs#1{\\left\\lvert #1 \\right\\rvert} \\def\\Set#1{\\left\\{ #1 \\right\\}} \\def\\mc#1{\\mathcal{#1}} \\def\\M#1{\\boldsymbol{#1}} \\def\\R#1{\\mathsf{#1}} \\def\\RM#1{\\boldsymbol{\\mathsf{#1}}} \\def\\op#1{\\operatorname{#1}} \\def\\E{\\op{E}} \\def\\d{\\mathrm{\\mathstrut d}}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To do:\n",
    "- explanation for the trainning and ploting\n",
    "- the analysis of the two term in the ELBO and relation with Information theory\n",
    "- infoVAE\n",
    "- Examples showing why InfoVAE\n",
    "\n",
    "Notations:  \n",
    "*When substitue, remember skip the code*\n",
    "- substitue $Z$ by $\\R{Z}$ and similar for $X$\n",
    "- substitue Encoder by *Encoder*, and similar for decoder\n",
    "\n",
    "To improve:\n",
    "- why directly sampling posterior is intractable\n",
    "- reparameterization trick, seems have relationship with importance sampling\n",
    "- whether also use sampling for x_hat in the experiment\n",
    "- where to put the code for importing packages\n",
    "- should we use capital variable name for batch_size, epochs, etc..\n",
    "- The train dateset and test dataset maybe combined. Currently, use the train dataset for training, and test dataset for evaluating is a bit improper to see the reconstruction performance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remark  \n",
    "- The following follows the idea from https://arxiv.org/abs/1606.05908 , Tutorial on Variational Autoencoders   \n",
    "\n",
    "- I skipped the illustration from $p_{\\hat{X}|Z}(x|z) = \\mc{N}(\\mu_{\\phi}, \\sigma^2 * \\M{I})$ to $p_{\\hat{X}|Z}(x|z) = \\mc{N}(\\mu_{\\phi}, \\Sigma_{\\phi})$ \n",
    "\n",
    "- About the notation, since the standard Gaussian distribution in latent space is introduced first, $Z$ is the know standard Gaussian distribution, and then $\\hat{Z}$ is the representation given by the encoder. the pairs are: $X - (Encoder) - \\hat{Z}$, $Z - (Decoder) - \\hat{X}$, $\\hat{Z} - (Decoder) - \\bar{X}$.  \n",
    "When we consider VIB, we may need the markov chain $Y - X - Z$, where $Z$ is used as the representation of $X$, and if VIB is involved, then introduce $\\bar{Z}$ as the know stardard Gaussian distribution is better, and the pairs are: $X - (Encoder) - Z$, $\\bar{Z} - (Decoder) - \\hat{X}$, $Z - (Decoder) - \\bar{X}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem formulation\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given a dataset containing samples $\\R{X}$.    \n",
    "How to design a model that with latent random variariable $\\R{Z}$ as input, it generate different samples that are like those already in a trainning datase, but not exactly the same?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Suppose a deterministic function $g: \\mc{Z} \\rightarrow \\mc{X}$ parametrized by $\\phi$ which models $p_{\\hat{X}|Z}$, i.e., outputs the generated samples with input from latent space $\\mc{Z}$.  \n",
    "\n",
    "When $Z$ is random, $g(Z)$ will be a random variable in sample space $\\mc{X}$. \n",
    "e want to choose the $\\phi$ such that by sampling a $z \\sim p_{Z}$, $g(z)$ will be like the $x's$ in the dataset with high probability. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We may try to maximize the probability for generating sample $\\hat{X}$ by training the the parameter $\\phi$ of function $g$ according to the law of total probability:\n",
    "$$p_{\\hat{X}}(X)=\\int p_{\\hat{X}|Z}(X|z) p_{Z}(z) dz.$$ \n",
    "\n",
    "We assume $p_{Z}$ is a standard Gaussian distribution, and $p_{\\hat{X}|Z}(X|z)$ is a Gaussian distribution with mean and variance given by $g(Z)$. This is to say,   \n",
    "$$Z \\sim \\mc{N}(\\M{0},\\M{I}),$$ \n",
    "and $$p_{\\hat{X}|Z}(x|z) = \\mc{N}(x | \\mu_{\\phi}, \\Sigma_{\\phi}),$$ \n",
    "where \n",
    "$$[\\mu_{\\phi}, \\Sigma_{\\phi}] = g(z).$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The empiracal way to approximate $p_{\\hat{X}}$ is to sammple a large number of $z$ values $\\{z_1, z_2, \\dots, z_n\\}$ from Z followed by computing:\n",
    "$$p_{\\hat{X}}(X) \\approx \\frac{1}{n} \\sum_{i} p_{\\hat{X}|Z}(X|z_i)$$\n",
    "\n",
    "However, this needs too many samples and is intractable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we want to sample the $z$ values that are likely to generate $x$. This means we need inferring $\\hat{Z}$ from $X$.\n",
    "\n",
    "We assume $p_{\\hat{Z}|X}(Z|x)$ is a Gaussian distribution, and use a trainable function $f:\\mc{X} \\rightarrow \\mc{Z}$ parameterized by $\\theta$ to output the mean and variance of $p_{\\hat{Z}|X}(Z|x)$. This is to say\n",
    "$$ p_{\\hat{Z}|X}(z|x) =\\mc{N}(z | \\mu_{\\theta}, \\Sigma_{\\theta}), $$\n",
    "where \n",
    "$$[\\mu_{\\theta}, \\Sigma_{\\theta}] = f(x).$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have: \n",
    "$$ p_{\\hat{X}}(x) = \\underbrace{E[p_{\\hat{X}|Z}(x|\\hat{Z})| x=X] -D(P_{\\hat{Z}|X}(\\cdot | x) || P_{Z})}_{\\text{ELBO}(x)} + D(P_{\\hat{Z}|X}(\\cdot | x) | P_{Z|X}(\\cdot | x)).$$\n",
    "\n",
    "Hence,\n",
    "$$ E[p_{\\hat{X}}(X)] \\geq \\underbrace{E[p_{\\hat{X}|Z}(X|\\hat{Z})] - D(P_{\\hat{Z}|X} || P_{Z}|P_{X})}_{\\text{ELBO}}. $$\n",
    "\n",
    "Then to maximize $E[p_{\\hat{X}}(X)]$, we can optimize the parameters of the whole model by maximizing the ELBO.  \n",
    "\n",
    "We usually minimizing an objective function, and it is\n",
    "$$\\min_\\limits{\\phi, \\theta} L_{\\text{VAE}} := E[ - p_{\\hat{X}|Z}(X|\\hat{Z})] + D(P_{\\hat{Z}|X} || P_{Z}|P_{X})$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "**Exercise** \n",
    "\n",
    "Prove that \n",
    "$$ p_{\\hat{X}}(x) \\geq E[p_{\\hat{X}|Z}(x|\\hat{Z})|x=X] -D(P_{\\hat{Z}|X}(\\cdot | x) || P_{Z}). $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use neural networks for $f$ and $g$, and we call $f$ the $Decoder$ and $g$ the $Encoder$, since the structure of the whole model resembles an autoencoder."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reference  \n",
    "https://github.com/Jackson-Kang/Pytorch-VAE-tutorial/blob/master/01_Variational_AutoEncoder.ipynb\n",
    "https://github.com/AntixK/PyTorch-VAE\n",
    "https://github.com/GuHongyang/VaDE-pytorch\n",
    "\n",
    "https://arxiv.org/abs/1606.05908"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "from tqdm import tqdm\n",
    "from torchvision.utils import save_image, make_grid\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://pytorch.org/docs/stable/notes/randomness.html\n",
    "SEED = 0\n",
    "torch.manual_seed(SEED)\n",
    "np.random.seed(SEED)\n",
    "\n",
    "import random\n",
    "random.seed(SEED)\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model Hyperparameters\n",
    "\n",
    "dataset_path = './datasets'\n",
    "\n",
    "cuda = torch.cuda.is_available()\n",
    "DEVICE = torch.device(\"cuda\" if cuda else \"cpu\")\n",
    "\n",
    "\n",
    "batch_size = 128\n",
    "\n",
    "x_dim  = 784 # dimension of input data for Decoder\n",
    "latent_dim = 200 # dimension for latent representation z\n",
    "hidden_dims = [400] \n",
    "decoder_hidden_dims = None # if not None, it means specifying different hidden nodes of internal layers for Decoder with Encoder\n",
    "\n",
    "beta = 1 # the coefficient for the divergence term in L_{VAE}, beta = 1 is the vanilla VAE\n",
    "\n",
    "lr = 1e-3\n",
    "\n",
    "epochs = 15\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use MNIST dataset as an example.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torchvision.datasets import MNIST\n",
    "import torchvision.transforms as transforms\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "\n",
    "mnist_transform = transforms.Compose([\n",
    "        transforms.ToTensor(),\n",
    "])\n",
    "\n",
    "kwargs = {'num_workers': 1, 'pin_memory': True} \n",
    "\n",
    "train_dataset = MNIST(dataset_path, transform=mnist_transform, train=True, download=True)\n",
    "test_dataset  = MNIST(dataset_path, transform=mnist_transform, train=False, download=True)\n",
    "\n",
    "train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True, **kwargs)\n",
    "test_loader  = DataLoader(dataset=test_dataset,  batch_size=batch_size, shuffle=False, **kwargs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build the Encoder, i.e., the function $f$, for inferring $\\hat{Z}$ from $X$.\n",
    "$$ p_{\\hat{Z}|X}(z|x) =\\mc{N}(z | \\mu_{\\theta}, \\Sigma_{\\theta}), $$\n",
    "where \n",
    "$$[\\mu_{\\theta}, \\Sigma_{\\theta}] = f(x).$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We assume $\\Sigma_{\\theta}$ is diagonal, i.e.,\n",
    "$$\\Sigma_{\\theta} := \\text{diag}\\left(\\left\\{\\sigma_{\\theta, 1}^2, \\sigma_{\\theta, 2}^2, \\dots,  \\sigma_{\\theta, d_{Z}}^2 \\right\\}\\right) =  \\text{diag} \\left( \\left\\{\\sigma_{\\theta, j}^2 \\right\\}_{j=1}^{d_{Z}} \\right),$$ \n",
    "where $d_{Z}$ is the dimension of $Z$.  \n",
    "\n",
    "The output of the Encoder is $\\mu_{\\theta}$ and $\\left[\\log \\sigma_{\\theta, 1}^2, \\log \\sigma_{\\theta, 2}^2, \\dots,  \\log \\sigma_{\\theta, d_{Z}}^2 \\right]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Encoder(nn.Module):      def __init__(self, x_dim=x_dim, latent_dim=latent_dim, hidden_dims = hidden_dims):\n",
    "        super(Encoder,self).__init__()\n",
    "\n",
    " \n",
    "        self.x_dim = x_dim\n",
    "        self.latent_dim = latent_dim\n",
    "        self.hidden_dims = hidden_dims       modules = []\n",
    "              self.input_dim = x_diself.m\n",
    "   \n",
    " or h_dim in hidden_dimsself.:\n",
    "             modules.append(\n",
    "                \n",
    "nn.Sequential(\n",
    "          \n",
    "                     n.sLelf.input h_dim)\n",
    "           ,          nn.ReLU(inplnn.ReLU()               )            )  sel\n",
    "            finputself._dim = h_dim.encoder=nn.Sequential(\n",
    "            *blimodules=nn.Linear(inter_dims[-1],hid_dimhidden_dimsself.[-1]. latent_dim_self.z=nn.Linear(inter_dims[-1nn.Linear(hidden_dimsself.[-1], latent_dim)self. x):\n",
    "        e=self.encoder(x)\n",
    "\n",
    "        mu=self.mu_z(e)\n",
    "        log_var=self.log_var_z(e)\n",
    "\n",
    "        return mu, log_var        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build the Decoder, i.e., the function $g$, for generating $\\hat{X}$ from $Z$.  \n",
    "\n",
    "$$p_{\\hat{X}|Z}(x|z) = \\mc{N}(x | \\mu_{\\phi}, \\Sigma_{\\phi}),$$ \n",
    "where \n",
    "$$[\\mu_{\\phi}, \\Sigma_{\\phi}] = g(z).$$ \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The default hidden dimensions of the layers in Decoder are the reverse order of those in Encoder.  \n",
    "\n",
    "We can also define a different one for Decoder by setting the argument *decoder_hidden_dims*.  \n",
    "\n",
    "In the Decoder here, for an input $z$ we use $\\mu_{\\phi}$ as $\\hat{x}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Decoder(nn.Module):\n",
    "    def __init__(self, x_dim=x_dim, latent_dim=latent_dim, hidden_dims = hidden_dims, decoder_hidden_dims = decoder_hidden_dims):\n",
    "        super(Decoder,self).__init__()\n",
    "\n",
    "        self.x_dim = x_dim\n",
    "        self.latent_dim = latent_dim\n",
    "        self.hidden_dims = hidden_dims\n",
    "        self.decoder_hidden_dims = decoder_hidden_dims\n",
    "\n",
    "        modules = []\n",
    "\n",
    "        if self.decoder_hidden_dims is None:\n",
    "            self.decoder_hidden_dims = list(reversed(self.hidden_dims))\n",
    "\n",
    "        self.input_dim = self.latent_dim\n",
    "\n",
    "        for h_dim in self.decoder_hidden_dims:\n",
    "            modules.append(\n",
    "                nn.Sequential(\n",
    "                    nn.Linear(self.input_dim, h_dim),\n",
    "                    nn.ReLU(inplace=True)\n",
    "                )\n",
    "            )\n",
    "            self.input_dim = h_dim\n",
    "\n",
    "        self.decoder=nn.Sequential(*modules)\n",
    "\n",
    "        self.mu_x=nn.Linear(self.decoder_hidden_dims[-1], self.x_dim)\n",
    "        # self.log_var_x=nn.Linear(hidden_dims[-1], self.x_dim)\n",
    "\n",
    "    def forward(self, z):\n",
    "        d=self.decoder(z)\n",
    "        \n",
    "        # use Sigmoid activation to ensure elements of mu, or the x_hat below are in (0,1)\n",
    "        mu=torch.sigmoid(self.mu_x(d))\n",
    "        # log_var=self.log_var_x(d)\n",
    "\n",
    "        # for decoder, we care about the mean\n",
    "        x_hat = mu\n",
    "\n",
    "        return x_hat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reparameterization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To train the Encoder and Decoder, we need the gradients with respect to the trainable parameters, and backpropagate through the neural networks.  \n",
    "\n",
    "However, the input for the Decoder, $\\hat{z}$ values is randomly sampled from $\\mc{N}(\\mu_{\\theta}, \\Sigma_{\\theta})$, and the backpropagation cannot flow through such a random node.  \n",
    "\n",
    "Instead of directly sampling $\\hat{z}$ values the reparameterization trick introduces a random variable $$\\epsilon \\sim \\mc{N}(\\M{0},\\M{I}),$$ and sample \n",
    "$$\\epsilon_i \\sim \\mc{N}(\\M{0},\\M{I}),$$ then $z_i$ is obtained by \n",
    "$$z_i = \\mu_{\\theta} + \\text{diag} \\left( \\left\\{\\sigma_{\\theta, j} \\right\\}_{j=1}^{d_{Z}} \\right) \\cdot \\epsilon_i,$$ \n",
    "where we assume $\\Sigma_{\\theta}$ is a diagonal matrix with \n",
    "$$\\Sigma_{\\theta} := \\text{diag} \\left( \\left\\{\\sigma_{\\theta, j}^2 \\right\\}_{j=1}^{d_{Z}} \\right).$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reparameterization(mean, std):\n",
    "    epsilon = torch.randn_like(std).to(DEVICE)        # sampling epsilon        \n",
    "    z = mean + std*epsilon                          # reparameterization trick\n",
    "    return z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build the model composed of Encoder and Decoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Model(nn.Module):\n",
    "    def __init__(self, encoder, decoder):\n",
    "        super(Model, self).__init__()\n",
    "        self.encoder = encoder\n",
    "        self.decoder = decoder     \n",
    "                \n",
    "    def forward(self, x):\n",
    "        mu, log_var = self.encoder(x)\n",
    "        z = reparameterization(mu, torch.exp(0.5 * log_var))\n",
    "        x_hat = self.decoder(z)\n",
    "        \n",
    "        return x_hat, mu, log_var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# encoder = Encoder(input_dim=784,inter_dims=[500,500,2000],hid_dim=10)\n",
    "# # decoder and encoder are symetric, and for the arguments decides the dimension of each layer we look at the layers of decoder from \"tail to head\"\n",
    "# decoder = Decoder(input_dim=784,inter_dims=[500,500,2000],hid_dim=10)\n",
    "\n",
    "encoder=Encoder()\n",
    "decoder=Decoder()\n",
    "\n",
    "model = Model(encoder=encoder, decoder=decoder).to(DEVICE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.optim import Adam\n",
    "\n",
    "def loss_function(x, x_hat, mu, log_var):\n",
    "    reconstruction_loss = nn.functional.binary_cross_entropy(x_hat, x, reduction='mean')\n",
    "    KLD = - 0.5 * torch.mean(1+ log_var - mu ** 2 - log_var.exp())\n",
    "\n",
    "    return reconstruction_loss + beta * KLD, reconstruction_loss, KLD \n",
    "\n",
    "optimizer = Adam(model.parameters(), lr=lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start training VAE...\n",
      "2021-08-18  23:37:51  \tEpoch 1: \tKLD Loss: 0.013805 \treconstruction Loss: 0.246022 \tLoss: 0.259827\n",
      "2021-08-18  23:37:59  \tEpoch 2: \tKLD Loss: 0.027442 \treconstruction Loss: 0.202921 \tLoss: 0.230363\n",
      "2021-08-18  23:38:06  \tEpoch 3: \tKLD Loss: 0.031759 \treconstruction Loss: 0.192983 \tLoss: 0.224742\n",
      "2021-08-18  23:38:14  \tEpoch 4: \tKLD Loss: 0.034225 \treconstruction Loss: 0.182276 \tLoss: 0.216501\n",
      "2021-08-18  23:38:21  \tEpoch 5: \tKLD Loss: 0.036129 \treconstruction Loss: 0.172537 \tLoss: 0.208666\n",
      "2021-08-18  23:38:29  \tEpoch 6: \tKLD Loss: 0.037930 \treconstruction Loss: 0.166025 \tLoss: 0.203955\n",
      "2021-08-18  23:38:37  \tEpoch 7: \tKLD Loss: 0.039828 \treconstruction Loss: 0.160631 \tLoss: 0.200459\n",
      "2021-08-18  23:38:44  \tEpoch 8: \tKLD Loss: 0.041287 \treconstruction Loss: 0.156627 \tLoss: 0.197914\n",
      "2021-08-18  23:38:52  \tEpoch 9: \tKLD Loss: 0.042106 \treconstruction Loss: 0.154321 \tLoss: 0.196427\n",
      "2021-08-18  23:38:59  \tEpoch 10: \tKLD Loss: 0.042611 \treconstruction Loss: 0.152774 \tLoss: 0.195385\n",
      "2021-08-18  23:39:07  \tEpoch 11: \tKLD Loss: 0.042970 \treconstruction Loss: 0.151570 \tLoss: 0.194540\n",
      "2021-08-18  23:39:15  \tEpoch 12: \tKLD Loss: 0.043307 \treconstruction Loss: 0.150538 \tLoss: 0.193845\n",
      "2021-08-18  23:39:22  \tEpoch 13: \tKLD Loss: 0.043647 \treconstruction Loss: 0.149632 \tLoss: 0.193279\n",
      "2021-08-18  23:39:30  \tEpoch 14: \tKLD Loss: 0.043845 \treconstruction Loss: 0.148892 \tLoss: 0.192737\n",
      "2021-08-18  23:39:37  \tEpoch 15: \tKLD Loss: 0.044144 \treconstruction Loss: 0.147992 \tLoss: 0.192135\n",
      "Finish!!\n"
     ]
    }
   ],
   "source": [
    "print(\"Start training VAE...\")\n",
    "model.train()\n",
    "\n",
    "loss_list = []\n",
    "reconstruction_loss_list = []\n",
    "KLD_list = []\n",
    "for epoch in range(epochs):\n",
    "    overall_loss = 0\n",
    "    overall_reconstruction_loss = 0\n",
    "    overall_KLD = 0\n",
    "    overall_sample_number = 0\n",
    "    for batch_idx, (x, _) in enumerate(train_loader):\n",
    "\n",
    "        x = x.view(-1, x_dim)\n",
    "        x = x.to(DEVICE)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        x_hat, mu, log_var = model(x)\n",
    "        loss, reconstruction_loss, KLD = loss_function(x, x_hat, mu, log_var)\n",
    "        \n",
    "        overall_loss += loss.item() * x.shape[0]\n",
    "        overall_reconstruction_loss += reconstruction_loss.item() * x.shape[0]\n",
    "        overall_KLD += KLD.item() * x.shape[0]\n",
    "        overall_sample_number += x.shape[0]\n",
    "\n",
    "        train_loss = overall_loss / overall_sample_number\n",
    "        train_reconstruction_loss = overall_reconstruction_loss / overall_sample_number\n",
    "        train_KLD = overall_KLD / overall_sample_number\n",
    "        \n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "    loss_list.append(train_loss)\n",
    "    reconstruction_loss_list.append(train_reconstruction_loss)\n",
    "    KLD_list.append(train_KLD)\n",
    "\n",
    "    # print(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M:%S'), \"\\tEpoch\", epoch + 1, \":\", \"\\tKLD Loss: \", overall_KLD / overall_sample_number, \"\\treconstruction Loss: \", overall_reconstruction_loss / overall_sample_number, \"\\tLoss: \", overall_loss / overall_sample_number)\n",
    "\n",
    "    print(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M:%S'), \" \\tEpoch {}: \\tKLD Loss: {:.6f} \\treconstruction Loss: {:.6f} \\tLoss: {:.6f}\".format(epoch + 1, train_KLD, train_reconstruction_loss, train_loss))\n",
    "\n",
    "print(\"Finish!!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n",
       "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n",
       "<svg height=\"262.19625pt\" version=\"1.1\" viewBox=\"0 0 392.14375 262.19625\" width=\"392.14375pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n",
       " <metadata>\r\n",
       "  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\r\n",
       "   <cc:Work>\r\n",
       "    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\r\n",
       "    <dc:date>2021-08-18T23:39:38.170407</dc:date>\r\n",
       "    <dc:format>image/svg+xml</dc:format>\r\n",
       "    <dc:creator>\r\n",
       "     <cc:Agent>\r\n",
       "      <dc:title>Matplotlib v3.4.3, https://matplotlib.org/</dc:title>\r\n",
       "     </cc:Agent>\r\n",
       "    </dc:creator>\r\n",
       "   </cc:Work>\r\n",
       "  </rdf:RDF>\r\n",
       " </metadata>\r\n",
       " <defs>\r\n",
       "  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\r\n",
       " </defs>\r\n",
       " <g id=\"figure_1\">\r\n",
       "  <g id=\"patch_1\">\r\n",
       "   <path d=\"M 0 262.19625 \r\n",
       "L 392.14375 262.19625 \r\n",
       "L 392.14375 0 \r\n",
       "L 0 0 \r\n",
       "z\r\n",
       "\" style=\"fill:none;\"/>\r\n",
       "  </g>\r\n",
       "  <g id=\"axes_1\">\r\n",
       "   <g id=\"patch_2\">\r\n",
       "    <path d=\"M 50.14375 224.64 \r\n",
       "L 384.94375 224.64 \r\n",
       "L 384.94375 7.2 \r\n",
       "L 50.14375 7.2 \r\n",
       "z\r\n",
       "\" style=\"fill:#ffffff;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_1\">\r\n",
       "    <g id=\"xtick_1\">\r\n",
       "     <g id=\"line2d_1\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L 0 3.5 \r\n",
       "\" id=\"mf31c1c402d\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"87.102192\" xlink:href=\"#mf31c1c402d\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_1\">\r\n",
       "      <!-- 2 -->\r\n",
       "      <g transform=\"translate(83.920942 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 1228 531 \r\n",
       "L 3431 531 \r\n",
       "L 3431 0 \r\n",
       "L 469 0 \r\n",
       "L 469 531 \r\n",
       "Q 828 903 1448 1529 \r\n",
       "Q 2069 2156 2228 2338 \r\n",
       "Q 2531 2678 2651 2914 \r\n",
       "Q 2772 3150 2772 3378 \r\n",
       "Q 2772 3750 2511 3984 \r\n",
       "Q 2250 4219 1831 4219 \r\n",
       "Q 1534 4219 1204 4116 \r\n",
       "Q 875 4013 500 3803 \r\n",
       "L 500 4441 \r\n",
       "Q 881 4594 1212 4672 \r\n",
       "Q 1544 4750 1819 4750 \r\n",
       "Q 2544 4750 2975 4387 \r\n",
       "Q 3406 4025 3406 3419 \r\n",
       "Q 3406 3131 3298 2873 \r\n",
       "Q 3191 2616 2906 2266 \r\n",
       "Q 2828 2175 2409 1742 \r\n",
       "Q 1991 1309 1228 531 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-32\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_2\">\r\n",
       "     <g id=\"line2d_2\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"130.582711\" xlink:href=\"#mf31c1c402d\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_2\">\r\n",
       "      <!-- 4 -->\r\n",
       "      <g transform=\"translate(127.401461 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 2419 4116 \r\n",
       "L 825 1625 \r\n",
       "L 2419 1625 \r\n",
       "L 2419 4116 \r\n",
       "z\r\n",
       "M 2253 4666 \r\n",
       "L 3047 4666 \r\n",
       "L 3047 1625 \r\n",
       "L 3713 1625 \r\n",
       "L 3713 1100 \r\n",
       "L 3047 1100 \r\n",
       "L 3047 0 \r\n",
       "L 2419 0 \r\n",
       "L 2419 1100 \r\n",
       "L 313 1100 \r\n",
       "L 313 1709 \r\n",
       "L 2253 4666 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-34\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-34\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_3\">\r\n",
       "     <g id=\"line2d_3\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"174.063231\" xlink:href=\"#mf31c1c402d\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_3\">\r\n",
       "      <!-- 6 -->\r\n",
       "      <g transform=\"translate(170.881981 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 2113 2584 \r\n",
       "Q 1688 2584 1439 2293 \r\n",
       "Q 1191 2003 1191 1497 \r\n",
       "Q 1191 994 1439 701 \r\n",
       "Q 1688 409 2113 409 \r\n",
       "Q 2538 409 2786 701 \r\n",
       "Q 3034 994 3034 1497 \r\n",
       "Q 3034 2003 2786 2293 \r\n",
       "Q 2538 2584 2113 2584 \r\n",
       "z\r\n",
       "M 3366 4563 \r\n",
       "L 3366 3988 \r\n",
       "Q 3128 4100 2886 4159 \r\n",
       "Q 2644 4219 2406 4219 \r\n",
       "Q 1781 4219 1451 3797 \r\n",
       "Q 1122 3375 1075 2522 \r\n",
       "Q 1259 2794 1537 2939 \r\n",
       "Q 1816 3084 2150 3084 \r\n",
       "Q 2853 3084 3261 2657 \r\n",
       "Q 3669 2231 3669 1497 \r\n",
       "Q 3669 778 3244 343 \r\n",
       "Q 2819 -91 2113 -91 \r\n",
       "Q 1303 -91 875 529 \r\n",
       "Q 447 1150 447 2328 \r\n",
       "Q 447 3434 972 4092 \r\n",
       "Q 1497 4750 2381 4750 \r\n",
       "Q 2619 4750 2861 4703 \r\n",
       "Q 3103 4656 3366 4563 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-36\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-36\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_4\">\r\n",
       "     <g id=\"line2d_4\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"217.54375\" xlink:href=\"#mf31c1c402d\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_4\">\r\n",
       "      <!-- 8 -->\r\n",
       "      <g transform=\"translate(214.3625 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 2034 2216 \r\n",
       "Q 1584 2216 1326 1975 \r\n",
       "Q 1069 1734 1069 1313 \r\n",
       "Q 1069 891 1326 650 \r\n",
       "Q 1584 409 2034 409 \r\n",
       "Q 2484 409 2743 651 \r\n",
       "Q 3003 894 3003 1313 \r\n",
       "Q 3003 1734 2745 1975 \r\n",
       "Q 2488 2216 2034 2216 \r\n",
       "z\r\n",
       "M 1403 2484 \r\n",
       "Q 997 2584 770 2862 \r\n",
       "Q 544 3141 544 3541 \r\n",
       "Q 544 4100 942 4425 \r\n",
       "Q 1341 4750 2034 4750 \r\n",
       "Q 2731 4750 3128 4425 \r\n",
       "Q 3525 4100 3525 3541 \r\n",
       "Q 3525 3141 3298 2862 \r\n",
       "Q 3072 2584 2669 2484 \r\n",
       "Q 3125 2378 3379 2068 \r\n",
       "Q 3634 1759 3634 1313 \r\n",
       "Q 3634 634 3220 271 \r\n",
       "Q 2806 -91 2034 -91 \r\n",
       "Q 1263 -91 848 271 \r\n",
       "Q 434 634 434 1313 \r\n",
       "Q 434 1759 690 2068 \r\n",
       "Q 947 2378 1403 2484 \r\n",
       "z\r\n",
       "M 1172 3481 \r\n",
       "Q 1172 3119 1398 2916 \r\n",
       "Q 1625 2713 2034 2713 \r\n",
       "Q 2441 2713 2670 2916 \r\n",
       "Q 2900 3119 2900 3481 \r\n",
       "Q 2900 3844 2670 4047 \r\n",
       "Q 2441 4250 2034 4250 \r\n",
       "Q 1625 4250 1398 4047 \r\n",
       "Q 1172 3844 1172 3481 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-38\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-38\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_5\">\r\n",
       "     <g id=\"line2d_5\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"261.024269\" xlink:href=\"#mf31c1c402d\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_5\">\r\n",
       "      <!-- 10 -->\r\n",
       "      <g transform=\"translate(254.661769 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 794 531 \r\n",
       "L 1825 531 \r\n",
       "L 1825 4091 \r\n",
       "L 703 3866 \r\n",
       "L 703 4441 \r\n",
       "L 1819 4666 \r\n",
       "L 2450 4666 \r\n",
       "L 2450 531 \r\n",
       "L 3481 531 \r\n",
       "L 3481 0 \r\n",
       "L 794 0 \r\n",
       "L 794 531 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-31\" transform=\"scale(0.015625)\"/>\r\n",
       "        <path d=\"M 2034 4250 \r\n",
       "Q 1547 4250 1301 3770 \r\n",
       "Q 1056 3291 1056 2328 \r\n",
       "Q 1056 1369 1301 889 \r\n",
       "Q 1547 409 2034 409 \r\n",
       "Q 2525 409 2770 889 \r\n",
       "Q 3016 1369 3016 2328 \r\n",
       "Q 3016 3291 2770 3770 \r\n",
       "Q 2525 4250 2034 4250 \r\n",
       "z\r\n",
       "M 2034 4750 \r\n",
       "Q 2819 4750 3233 4129 \r\n",
       "Q 3647 3509 3647 2328 \r\n",
       "Q 3647 1150 3233 529 \r\n",
       "Q 2819 -91 2034 -91 \r\n",
       "Q 1250 -91 836 529 \r\n",
       "Q 422 1150 422 2328 \r\n",
       "Q 422 3509 836 4129 \r\n",
       "Q 1250 4750 2034 4750 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-30\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_6\">\r\n",
       "     <g id=\"line2d_6\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"304.504789\" xlink:href=\"#mf31c1c402d\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_6\">\r\n",
       "      <!-- 12 -->\r\n",
       "      <g transform=\"translate(298.142289 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_7\">\r\n",
       "     <g id=\"line2d_7\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"347.985308\" xlink:href=\"#mf31c1c402d\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_7\">\r\n",
       "      <!-- 14 -->\r\n",
       "      <g transform=\"translate(341.622808 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-34\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"text_8\">\r\n",
       "     <!-- epoch -->\r\n",
       "     <g transform=\"translate(202.315625 252.916562)scale(0.1 -0.1)\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 3597 1894 \r\n",
       "L 3597 1613 \r\n",
       "L 953 1613 \r\n",
       "Q 991 1019 1311 708 \r\n",
       "Q 1631 397 2203 397 \r\n",
       "Q 2534 397 2845 478 \r\n",
       "Q 3156 559 3463 722 \r\n",
       "L 3463 178 \r\n",
       "Q 3153 47 2828 -22 \r\n",
       "Q 2503 -91 2169 -91 \r\n",
       "Q 1331 -91 842 396 \r\n",
       "Q 353 884 353 1716 \r\n",
       "Q 353 2575 817 3079 \r\n",
       "Q 1281 3584 2069 3584 \r\n",
       "Q 2775 3584 3186 3129 \r\n",
       "Q 3597 2675 3597 1894 \r\n",
       "z\r\n",
       "M 3022 2063 \r\n",
       "Q 3016 2534 2758 2815 \r\n",
       "Q 2500 3097 2075 3097 \r\n",
       "Q 1594 3097 1305 2825 \r\n",
       "Q 1016 2553 972 2059 \r\n",
       "L 3022 2063 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-65\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 1159 525 \r\n",
       "L 1159 -1331 \r\n",
       "L 581 -1331 \r\n",
       "L 581 3500 \r\n",
       "L 1159 3500 \r\n",
       "L 1159 2969 \r\n",
       "Q 1341 3281 1617 3432 \r\n",
       "Q 1894 3584 2278 3584 \r\n",
       "Q 2916 3584 3314 3078 \r\n",
       "Q 3713 2572 3713 1747 \r\n",
       "Q 3713 922 3314 415 \r\n",
       "Q 2916 -91 2278 -91 \r\n",
       "Q 1894 -91 1617 61 \r\n",
       "Q 1341 213 1159 525 \r\n",
       "z\r\n",
       "M 3116 1747 \r\n",
       "Q 3116 2381 2855 2742 \r\n",
       "Q 2594 3103 2138 3103 \r\n",
       "Q 1681 3103 1420 2742 \r\n",
       "Q 1159 2381 1159 1747 \r\n",
       "Q 1159 1113 1420 752 \r\n",
       "Q 1681 391 2138 391 \r\n",
       "Q 2594 391 2855 752 \r\n",
       "Q 3116 1113 3116 1747 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-70\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 1959 3097 \r\n",
       "Q 1497 3097 1228 2736 \r\n",
       "Q 959 2375 959 1747 \r\n",
       "Q 959 1119 1226 758 \r\n",
       "Q 1494 397 1959 397 \r\n",
       "Q 2419 397 2687 759 \r\n",
       "Q 2956 1122 2956 1747 \r\n",
       "Q 2956 2369 2687 2733 \r\n",
       "Q 2419 3097 1959 3097 \r\n",
       "z\r\n",
       "M 1959 3584 \r\n",
       "Q 2709 3584 3137 3096 \r\n",
       "Q 3566 2609 3566 1747 \r\n",
       "Q 3566 888 3137 398 \r\n",
       "Q 2709 -91 1959 -91 \r\n",
       "Q 1206 -91 779 398 \r\n",
       "Q 353 888 353 1747 \r\n",
       "Q 353 2609 779 3096 \r\n",
       "Q 1206 3584 1959 3584 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-6f\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 3122 3366 \r\n",
       "L 3122 2828 \r\n",
       "Q 2878 2963 2633 3030 \r\n",
       "Q 2388 3097 2138 3097 \r\n",
       "Q 1578 3097 1268 2742 \r\n",
       "Q 959 2388 959 1747 \r\n",
       "Q 959 1106 1268 751 \r\n",
       "Q 1578 397 2138 397 \r\n",
       "Q 2388 397 2633 464 \r\n",
       "Q 2878 531 3122 666 \r\n",
       "L 3122 134 \r\n",
       "Q 2881 22 2623 -34 \r\n",
       "Q 2366 -91 2075 -91 \r\n",
       "Q 1284 -91 818 406 \r\n",
       "Q 353 903 353 1747 \r\n",
       "Q 353 2603 823 3093 \r\n",
       "Q 1294 3584 2113 3584 \r\n",
       "Q 2378 3584 2631 3529 \r\n",
       "Q 2884 3475 3122 3366 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-63\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 3513 2113 \r\n",
       "L 3513 0 \r\n",
       "L 2938 0 \r\n",
       "L 2938 2094 \r\n",
       "Q 2938 2591 2744 2837 \r\n",
       "Q 2550 3084 2163 3084 \r\n",
       "Q 1697 3084 1428 2787 \r\n",
       "Q 1159 2491 1159 1978 \r\n",
       "L 1159 0 \r\n",
       "L 581 0 \r\n",
       "L 581 4863 \r\n",
       "L 1159 4863 \r\n",
       "L 1159 2956 \r\n",
       "Q 1366 3272 1645 3428 \r\n",
       "Q 1925 3584 2291 3584 \r\n",
       "Q 2894 3584 3203 3211 \r\n",
       "Q 3513 2838 3513 2113 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-68\" transform=\"scale(0.015625)\"/>\r\n",
       "      </defs>\r\n",
       "      <use xlink:href=\"#DejaVuSans-65\"/>\r\n",
       "      <use x=\"61.523438\" xlink:href=\"#DejaVuSans-70\"/>\r\n",
       "      <use x=\"125\" xlink:href=\"#DejaVuSans-6f\"/>\r\n",
       "      <use x=\"186.181641\" xlink:href=\"#DejaVuSans-63\"/>\r\n",
       "      <use x=\"241.162109\" xlink:href=\"#DejaVuSans-68\"/>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_2\">\r\n",
       "    <g id=\"ytick_1\">\r\n",
       "     <g id=\"line2d_8\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L -3.5 0 \r\n",
       "\" id=\"m8d4edc3485\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.14375\" xlink:href=\"#m8d4edc3485\" y=\"185.674777\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_9\">\r\n",
       "      <!-- 0.05 -->\r\n",
       "      <g transform=\"translate(20.878125 189.473996)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 684 794 \r\n",
       "L 1344 794 \r\n",
       "L 1344 0 \r\n",
       "L 684 0 \r\n",
       "L 684 794 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-2e\" transform=\"scale(0.015625)\"/>\r\n",
       "        <path d=\"M 691 4666 \r\n",
       "L 3169 4666 \r\n",
       "L 3169 4134 \r\n",
       "L 1269 4134 \r\n",
       "L 1269 2991 \r\n",
       "Q 1406 3038 1543 3061 \r\n",
       "Q 1681 3084 1819 3084 \r\n",
       "Q 2600 3084 3056 2656 \r\n",
       "Q 3513 2228 3513 1497 \r\n",
       "Q 3513 744 3044 326 \r\n",
       "Q 2575 -91 1722 -91 \r\n",
       "Q 1428 -91 1123 -41 \r\n",
       "Q 819 9 494 109 \r\n",
       "L 494 744 \r\n",
       "Q 775 591 1075 516 \r\n",
       "Q 1375 441 1709 441 \r\n",
       "Q 2250 441 2565 725 \r\n",
       "Q 2881 1009 2881 1497 \r\n",
       "Q 2881 1984 2565 2268 \r\n",
       "Q 2250 2553 1709 2553 \r\n",
       "Q 1456 2553 1204 2497 \r\n",
       "Q 953 2441 691 2322 \r\n",
       "L 691 4666 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-35\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\r\n",
       "       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "       <use x=\"159.033203\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_2\">\r\n",
       "     <g id=\"line2d_9\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.14375\" xlink:href=\"#m8d4edc3485\" y=\"145.500996\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_10\">\r\n",
       "      <!-- 0.10 -->\r\n",
       "      <g transform=\"translate(20.878125 149.300215)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\r\n",
       "       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"159.033203\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_3\">\r\n",
       "     <g id=\"line2d_10\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.14375\" xlink:href=\"#m8d4edc3485\" y=\"105.327215\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_11\">\r\n",
       "      <!-- 0.15 -->\r\n",
       "      <g transform=\"translate(20.878125 109.126434)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\r\n",
       "       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"159.033203\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_4\">\r\n",
       "     <g id=\"line2d_11\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.14375\" xlink:href=\"#m8d4edc3485\" y=\"65.153434\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_12\">\r\n",
       "      <!-- 0.20 -->\r\n",
       "      <g transform=\"translate(20.878125 68.952653)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\r\n",
       "       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"159.033203\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_5\">\r\n",
       "     <g id=\"line2d_12\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.14375\" xlink:href=\"#m8d4edc3485\" y=\"24.979653\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_13\">\r\n",
       "      <!-- 0.25 -->\r\n",
       "      <g transform=\"translate(20.878125 28.778872)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\r\n",
       "       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"159.033203\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"text_14\">\r\n",
       "     <!-- value -->\r\n",
       "     <g transform=\"translate(14.798438 129.577812)rotate(-90)scale(0.1 -0.1)\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 191 3500 \r\n",
       "L 800 3500 \r\n",
       "L 1894 563 \r\n",
       "L 2988 3500 \r\n",
       "L 3597 3500 \r\n",
       "L 2284 0 \r\n",
       "L 1503 0 \r\n",
       "L 191 3500 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-76\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 2194 1759 \r\n",
       "Q 1497 1759 1228 1600 \r\n",
       "Q 959 1441 959 1056 \r\n",
       "Q 959 750 1161 570 \r\n",
       "Q 1363 391 1709 391 \r\n",
       "Q 2188 391 2477 730 \r\n",
       "Q 2766 1069 2766 1631 \r\n",
       "L 2766 1759 \r\n",
       "L 2194 1759 \r\n",
       "z\r\n",
       "M 3341 1997 \r\n",
       "L 3341 0 \r\n",
       "L 2766 0 \r\n",
       "L 2766 531 \r\n",
       "Q 2569 213 2275 61 \r\n",
       "Q 1981 -91 1556 -91 \r\n",
       "Q 1019 -91 701 211 \r\n",
       "Q 384 513 384 1019 \r\n",
       "Q 384 1609 779 1909 \r\n",
       "Q 1175 2209 1959 2209 \r\n",
       "L 2766 2209 \r\n",
       "L 2766 2266 \r\n",
       "Q 2766 2663 2505 2880 \r\n",
       "Q 2244 3097 1772 3097 \r\n",
       "Q 1472 3097 1187 3025 \r\n",
       "Q 903 2953 641 2809 \r\n",
       "L 641 3341 \r\n",
       "Q 956 3463 1253 3523 \r\n",
       "Q 1550 3584 1831 3584 \r\n",
       "Q 2591 3584 2966 3190 \r\n",
       "Q 3341 2797 3341 1997 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-61\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 603 4863 \r\n",
       "L 1178 4863 \r\n",
       "L 1178 0 \r\n",
       "L 603 0 \r\n",
       "L 603 4863 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-6c\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 544 1381 \r\n",
       "L 544 3500 \r\n",
       "L 1119 3500 \r\n",
       "L 1119 1403 \r\n",
       "Q 1119 906 1312 657 \r\n",
       "Q 1506 409 1894 409 \r\n",
       "Q 2359 409 2629 706 \r\n",
       "Q 2900 1003 2900 1516 \r\n",
       "L 2900 3500 \r\n",
       "L 3475 3500 \r\n",
       "L 3475 0 \r\n",
       "L 2900 0 \r\n",
       "L 2900 538 \r\n",
       "Q 2691 219 2414 64 \r\n",
       "Q 2138 -91 1772 -91 \r\n",
       "Q 1169 -91 856 284 \r\n",
       "Q 544 659 544 1381 \r\n",
       "z\r\n",
       "M 1991 3584 \r\n",
       "L 1991 3584 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-75\" transform=\"scale(0.015625)\"/>\r\n",
       "      </defs>\r\n",
       "      <use xlink:href=\"#DejaVuSans-76\"/>\r\n",
       "      <use x=\"59.179688\" xlink:href=\"#DejaVuSans-61\"/>\r\n",
       "      <use x=\"120.458984\" xlink:href=\"#DejaVuSans-6c\"/>\r\n",
       "      <use x=\"148.242188\" xlink:href=\"#DejaVuSans-75\"/>\r\n",
       "      <use x=\"211.621094\" xlink:href=\"#DejaVuSans-65\"/>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"line2d_13\">\r\n",
       "    <path clip-path=\"url(#pcb715b3ab4)\" d=\"M 65.361932 17.083636 \r\n",
       "L 87.102192 40.757547 \r\n",
       "L 108.842451 45.273478 \r\n",
       "L 130.582711 51.895548 \r\n",
       "L 152.322971 58.190384 \r\n",
       "L 174.063231 61.975979 \r\n",
       "L 195.80349 64.784775 \r\n",
       "L 217.54375 66.829469 \r\n",
       "L 239.28401 68.024294 \r\n",
       "L 261.024269 68.861749 \r\n",
       "L 282.764529 69.540069 \r\n",
       "L 304.504789 70.098752 \r\n",
       "L 326.245049 70.553942 \r\n",
       "L 347.985308 70.988997 \r\n",
       "L 369.725568 71.472628 \r\n",
       "\" style=\"fill:none;stroke:#1f77b4;stroke-linecap:square;stroke-width:1.5;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"line2d_14\">\r\n",
       "    <path clip-path=\"url(#pcb715b3ab4)\" d=\"M 65.361932 28.175831 \r\n",
       "L 87.102192 62.80616 \r\n",
       "L 108.842451 70.791115 \r\n",
       "L 130.582711 79.394372 \r\n",
       "L 152.322971 87.219241 \r\n",
       "L 174.063231 92.451569 \r\n",
       "L 195.80349 96.78561 \r\n",
       "L 217.54375 100.002898 \r\n",
       "L 239.28401 101.85553 \r\n",
       "L 261.024269 103.09877 \r\n",
       "L 282.764529 104.065535 \r\n",
       "L 304.504789 104.894964 \r\n",
       "L 326.245049 105.623022 \r\n",
       "L 347.985308 106.217622 \r\n",
       "L 369.725568 106.940938 \r\n",
       "\" style=\"fill:none;stroke:#ff7f0e;stroke-linecap:square;stroke-width:1.5;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"line2d_15\">\r\n",
       "    <path clip-path=\"url(#pcb715b3ab4)\" d=\"M 65.361932 214.756364 \r\n",
       "L 87.102192 203.799945 \r\n",
       "L 108.842451 200.330921 \r\n",
       "L 130.582711 198.349735 \r\n",
       "L 152.322971 196.819702 \r\n",
       "L 174.063231 195.372967 \r\n",
       "L 195.80349 193.847723 \r\n",
       "L 217.54375 192.675129 \r\n",
       "L 239.28401 192.017322 \r\n",
       "L 261.024269 191.611537 \r\n",
       "L 282.764529 191.323092 \r\n",
       "L 304.504789 191.052346 \r\n",
       "L 326.245049 190.779479 \r\n",
       "L 347.985308 190.619933 \r\n",
       "L 369.725568 190.380248 \r\n",
       "\" style=\"fill:none;stroke:#2ca02c;stroke-linecap:square;stroke-width:1.5;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_3\">\r\n",
       "    <path d=\"M 50.14375 224.64 \r\n",
       "L 50.14375 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_4\">\r\n",
       "    <path d=\"M 384.94375 224.64 \r\n",
       "L 384.94375 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_5\">\r\n",
       "    <path d=\"M 50.14375 224.64 \r\n",
       "L 384.94375 224.64 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_6\">\r\n",
       "    <path d=\"M 50.14375 7.2 \r\n",
       "L 384.94375 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"legend_1\">\r\n",
       "    <g id=\"patch_7\">\r\n",
       "     <path d=\"M 249.403125 59.5125 \r\n",
       "L 377.94375 59.5125 \r\n",
       "Q 379.94375 59.5125 379.94375 57.5125 \r\n",
       "L 379.94375 14.2 \r\n",
       "Q 379.94375 12.2 377.94375 12.2 \r\n",
       "L 249.403125 12.2 \r\n",
       "Q 247.403125 12.2 247.403125 14.2 \r\n",
       "L 247.403125 57.5125 \r\n",
       "Q 247.403125 59.5125 249.403125 59.5125 \r\n",
       "z\r\n",
       "\" style=\"fill:#ffffff;opacity:0.8;stroke:#cccccc;stroke-linejoin:miter;\"/>\r\n",
       "    </g>\r\n",
       "    <g id=\"line2d_16\">\r\n",
       "     <path d=\"M 251.403125 20.298437 \r\n",
       "L 271.403125 20.298437 \r\n",
       "\" style=\"fill:none;stroke:#1f77b4;stroke-linecap:square;stroke-width:1.5;\"/>\r\n",
       "    </g>\r\n",
       "    <g id=\"line2d_17\"/>\r\n",
       "    <g id=\"text_15\">\r\n",
       "     <!-- loss -->\r\n",
       "     <g transform=\"translate(279.403125 23.798437)scale(0.1 -0.1)\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 2834 3397 \r\n",
       "L 2834 2853 \r\n",
       "Q 2591 2978 2328 3040 \r\n",
       "Q 2066 3103 1784 3103 \r\n",
       "Q 1356 3103 1142 2972 \r\n",
       "Q 928 2841 928 2578 \r\n",
       "Q 928 2378 1081 2264 \r\n",
       "Q 1234 2150 1697 2047 \r\n",
       "L 1894 2003 \r\n",
       "Q 2506 1872 2764 1633 \r\n",
       "Q 3022 1394 3022 966 \r\n",
       "Q 3022 478 2636 193 \r\n",
       "Q 2250 -91 1575 -91 \r\n",
       "Q 1294 -91 989 -36 \r\n",
       "Q 684 19 347 128 \r\n",
       "L 347 722 \r\n",
       "Q 666 556 975 473 \r\n",
       "Q 1284 391 1588 391 \r\n",
       "Q 1994 391 2212 530 \r\n",
       "Q 2431 669 2431 922 \r\n",
       "Q 2431 1156 2273 1281 \r\n",
       "Q 2116 1406 1581 1522 \r\n",
       "L 1381 1569 \r\n",
       "Q 847 1681 609 1914 \r\n",
       "Q 372 2147 372 2553 \r\n",
       "Q 372 3047 722 3315 \r\n",
       "Q 1072 3584 1716 3584 \r\n",
       "Q 2034 3584 2315 3537 \r\n",
       "Q 2597 3491 2834 3397 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-73\" transform=\"scale(0.015625)\"/>\r\n",
       "      </defs>\r\n",
       "      <use xlink:href=\"#DejaVuSans-6c\"/>\r\n",
       "      <use x=\"27.783203\" xlink:href=\"#DejaVuSans-6f\"/>\r\n",
       "      <use x=\"88.964844\" xlink:href=\"#DejaVuSans-73\"/>\r\n",
       "      <use x=\"141.064453\" xlink:href=\"#DejaVuSans-73\"/>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"line2d_18\">\r\n",
       "     <path d=\"M 251.403125 34.976562 \r\n",
       "L 271.403125 34.976562 \r\n",
       "\" style=\"fill:none;stroke:#ff7f0e;stroke-linecap:square;stroke-width:1.5;\"/>\r\n",
       "    </g>\r\n",
       "    <g id=\"line2d_19\"/>\r\n",
       "    <g id=\"text_16\">\r\n",
       "     <!-- reconstruction_loss -->\r\n",
       "     <g transform=\"translate(279.403125 38.476562)scale(0.1 -0.1)\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 2631 2963 \r\n",
       "Q 2534 3019 2420 3045 \r\n",
       "Q 2306 3072 2169 3072 \r\n",
       "Q 1681 3072 1420 2755 \r\n",
       "Q 1159 2438 1159 1844 \r\n",
       "L 1159 0 \r\n",
       "L 581 0 \r\n",
       "L 581 3500 \r\n",
       "L 1159 3500 \r\n",
       "L 1159 2956 \r\n",
       "Q 1341 3275 1631 3429 \r\n",
       "Q 1922 3584 2338 3584 \r\n",
       "Q 2397 3584 2469 3576 \r\n",
       "Q 2541 3569 2628 3553 \r\n",
       "L 2631 2963 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-72\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 3513 2113 \r\n",
       "L 3513 0 \r\n",
       "L 2938 0 \r\n",
       "L 2938 2094 \r\n",
       "Q 2938 2591 2744 2837 \r\n",
       "Q 2550 3084 2163 3084 \r\n",
       "Q 1697 3084 1428 2787 \r\n",
       "Q 1159 2491 1159 1978 \r\n",
       "L 1159 0 \r\n",
       "L 581 0 \r\n",
       "L 581 3500 \r\n",
       "L 1159 3500 \r\n",
       "L 1159 2956 \r\n",
       "Q 1366 3272 1645 3428 \r\n",
       "Q 1925 3584 2291 3584 \r\n",
       "Q 2894 3584 3203 3211 \r\n",
       "Q 3513 2838 3513 2113 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-6e\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 1172 4494 \r\n",
       "L 1172 3500 \r\n",
       "L 2356 3500 \r\n",
       "L 2356 3053 \r\n",
       "L 1172 3053 \r\n",
       "L 1172 1153 \r\n",
       "Q 1172 725 1289 603 \r\n",
       "Q 1406 481 1766 481 \r\n",
       "L 2356 481 \r\n",
       "L 2356 0 \r\n",
       "L 1766 0 \r\n",
       "Q 1100 0 847 248 \r\n",
       "Q 594 497 594 1153 \r\n",
       "L 594 3053 \r\n",
       "L 172 3053 \r\n",
       "L 172 3500 \r\n",
       "L 594 3500 \r\n",
       "L 594 4494 \r\n",
       "L 1172 4494 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-74\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 603 3500 \r\n",
       "L 1178 3500 \r\n",
       "L 1178 0 \r\n",
       "L 603 0 \r\n",
       "L 603 3500 \r\n",
       "z\r\n",
       "M 603 4863 \r\n",
       "L 1178 4863 \r\n",
       "L 1178 4134 \r\n",
       "L 603 4134 \r\n",
       "L 603 4863 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-69\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 3263 -1063 \r\n",
       "L 3263 -1509 \r\n",
       "L -63 -1509 \r\n",
       "L -63 -1063 \r\n",
       "L 3263 -1063 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-5f\" transform=\"scale(0.015625)\"/>\r\n",
       "      </defs>\r\n",
       "      <use xlink:href=\"#DejaVuSans-72\"/>\r\n",
       "      <use x=\"38.863281\" xlink:href=\"#DejaVuSans-65\"/>\r\n",
       "      <use x=\"100.386719\" xlink:href=\"#DejaVuSans-63\"/>\r\n",
       "      <use x=\"155.367188\" xlink:href=\"#DejaVuSans-6f\"/>\r\n",
       "      <use x=\"216.548828\" xlink:href=\"#DejaVuSans-6e\"/>\r\n",
       "      <use x=\"279.927734\" xlink:href=\"#DejaVuSans-73\"/>\r\n",
       "      <use x=\"332.027344\" xlink:href=\"#DejaVuSans-74\"/>\r\n",
       "      <use x=\"371.236328\" xlink:href=\"#DejaVuSans-72\"/>\r\n",
       "      <use x=\"412.349609\" xlink:href=\"#DejaVuSans-75\"/>\r\n",
       "      <use x=\"475.728516\" xlink:href=\"#DejaVuSans-63\"/>\r\n",
       "      <use x=\"530.708984\" xlink:href=\"#DejaVuSans-74\"/>\r\n",
       "      <use x=\"569.917969\" xlink:href=\"#DejaVuSans-69\"/>\r\n",
       "      <use x=\"597.701172\" xlink:href=\"#DejaVuSans-6f\"/>\r\n",
       "      <use x=\"658.882812\" xlink:href=\"#DejaVuSans-6e\"/>\r\n",
       "      <use x=\"722.261719\" xlink:href=\"#DejaVuSans-5f\"/>\r\n",
       "      <use x=\"772.261719\" xlink:href=\"#DejaVuSans-6c\"/>\r\n",
       "      <use x=\"800.044922\" xlink:href=\"#DejaVuSans-6f\"/>\r\n",
       "      <use x=\"861.226562\" xlink:href=\"#DejaVuSans-73\"/>\r\n",
       "      <use x=\"913.326172\" xlink:href=\"#DejaVuSans-73\"/>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"line2d_20\">\r\n",
       "     <path d=\"M 251.403125 49.932812 \r\n",
       "L 271.403125 49.932812 \r\n",
       "\" style=\"fill:none;stroke:#2ca02c;stroke-linecap:square;stroke-width:1.5;\"/>\r\n",
       "    </g>\r\n",
       "    <g id=\"line2d_21\"/>\r\n",
       "    <g id=\"text_17\">\r\n",
       "     <!-- KLD -->\r\n",
       "     <g transform=\"translate(279.403125 53.432812)scale(0.1 -0.1)\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 628 4666 \r\n",
       "L 1259 4666 \r\n",
       "L 1259 2694 \r\n",
       "L 3353 4666 \r\n",
       "L 4166 4666 \r\n",
       "L 1850 2491 \r\n",
       "L 4331 0 \r\n",
       "L 3500 0 \r\n",
       "L 1259 2247 \r\n",
       "L 1259 0 \r\n",
       "L 628 0 \r\n",
       "L 628 4666 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-4b\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 628 4666 \r\n",
       "L 1259 4666 \r\n",
       "L 1259 531 \r\n",
       "L 3531 531 \r\n",
       "L 3531 0 \r\n",
       "L 628 0 \r\n",
       "L 628 4666 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-4c\" transform=\"scale(0.015625)\"/>\r\n",
       "       <path d=\"M 1259 4147 \r\n",
       "L 1259 519 \r\n",
       "L 2022 519 \r\n",
       "Q 2988 519 3436 956 \r\n",
       "Q 3884 1394 3884 2338 \r\n",
       "Q 3884 3275 3436 3711 \r\n",
       "Q 2988 4147 2022 4147 \r\n",
       "L 1259 4147 \r\n",
       "z\r\n",
       "M 628 4666 \r\n",
       "L 1925 4666 \r\n",
       "Q 3281 4666 3915 4102 \r\n",
       "Q 4550 3538 4550 2338 \r\n",
       "Q 4550 1131 3912 565 \r\n",
       "Q 3275 0 1925 0 \r\n",
       "L 628 0 \r\n",
       "L 628 4666 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-44\" transform=\"scale(0.015625)\"/>\r\n",
       "      </defs>\r\n",
       "      <use xlink:href=\"#DejaVuSans-4b\"/>\r\n",
       "      <use x=\"65.576172\" xlink:href=\"#DejaVuSans-4c\"/>\r\n",
       "      <use x=\"121.289062\" xlink:href=\"#DejaVuSans-44\"/>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "  </g>\r\n",
       " </g>\r\n",
       " <defs>\r\n",
       "  <clipPath id=\"pcb715b3ab4\">\r\n",
       "   <rect height=\"217.44\" width=\"334.8\" x=\"50.14375\" y=\"7.2\"/>\r\n",
       "  </clipPath>\r\n",
       " </defs>\r\n",
       "</svg>\r\n"
      ],
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.plot(range(1,epochs+1), loss_list, label = 'loss')\n",
    "plt.plot(range(1,epochs+1), reconstruction_loss_list, label = 'reconstruction_loss')\n",
    "plt.plot(range(1,epochs+1), KLD_list, label = 'KLD')\n",
    "plt.xlabel('epoch')\n",
    "plt.ylabel('value')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visuallization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can set the *batch_idx* value, which is the batch we want to evaluate. The evaluating process will stop at the selected batch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/79 [00:01<?, ?it/s]\n"
     ]
    }
   ],
   "source": [
    "# set the index of the batch you want to evaluate\n",
    "batch_selected = 0 \n",
    "\n",
    "model.eval()\n",
    "\n",
    "with torch.no_grad():\n",
    "    for batch_idx, (x, _) in enumerate(tqdm(test_loader)): # use the test dataset here, but it is only used for comparing original sample and generated sample  \n",
    "        x = x.view(-1, x_dim)\n",
    "        x = x.to(DEVICE)\n",
    "        \n",
    "        x_hat, _, _ = model(x)\n",
    "\n",
    "        if batch_idx == batch_selected:\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the function for ploting\n",
    "def show_image(x, idx, title=None):\n",
    "    x = x.view(batch_size, 28, 28)\n",
    "\n",
    "    fig = plt.figure()\n",
    "    if title is not None:\n",
    "        plt.suptitle(title)\n",
    "    plt.imshow(x[idx].cpu().numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can set the *idx_selected* value, which is the index of the sample in the above batch we want to evaluate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n",
       "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n",
       "<svg height=\"277.318125pt\" version=\"1.1\" viewBox=\"0 0 251.565 277.318125\" width=\"251.565pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n",
       " <metadata>\r\n",
       "  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\r\n",
       "   <cc:Work>\r\n",
       "    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\r\n",
       "    <dc:date>2021-08-18T23:39:39.898814</dc:date>\r\n",
       "    <dc:format>image/svg+xml</dc:format>\r\n",
       "    <dc:creator>\r\n",
       "     <cc:Agent>\r\n",
       "      <dc:title>Matplotlib v3.4.3, https://matplotlib.org/</dc:title>\r\n",
       "     </cc:Agent>\r\n",
       "    </dc:creator>\r\n",
       "   </cc:Work>\r\n",
       "  </rdf:RDF>\r\n",
       " </metadata>\r\n",
       " <defs>\r\n",
       "  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\r\n",
       " </defs>\r\n",
       " <g id=\"figure_1\">\r\n",
       "  <g id=\"patch_1\">\r\n",
       "   <path d=\"M 0 277.318125 \r\n",
       "L 251.565 277.318125 \r\n",
       "L 251.565 0 \r\n",
       "L 0 0 \r\n",
       "z\r\n",
       "\" style=\"fill:none;\"/>\r\n",
       "  </g>\r\n",
       "  <g id=\"axes_1\">\r\n",
       "   <g id=\"patch_2\">\r\n",
       "    <path d=\"M 26.925 253.44 \r\n",
       "L 244.365 253.44 \r\n",
       "L 244.365 36 \r\n",
       "L 26.925 36 \r\n",
       "z\r\n",
       "\" style=\"fill:#ffffff;\"/>\r\n",
       "   </g>\r\n",
       "   <g clip-path=\"url(#pb4f6d526a0)\">\r\n",
       "    <image height=\"218\" id=\"image26d52db215\" transform=\"scale(1 -1)translate(0 -218)\" width=\"218\" x=\"26.925\" xlink:href=\"data:image/png;base64,\r\n",
       "iVBORw0KGgoAAAANSUhEUgAAANoAAADaCAYAAADAHVzbAAAFo0lEQVR4nO3dWYiVdRzG8XNk0hzTysiiwoy6sE2ooGy5KMosKkkyWr2IVghaKIgKgggqglZartPKiyCoMAnJaNNSgiRSK7HICcNSS0tRp5mupd4fOeozc8bP5/bhPx6Qr3/w5T3Tvqg9q78F7FMjBvsDwP5AaBAgNAgQGgQIDQKEBgFCg4Cuwf4AnWrNk2eX+6rZLzVuT2w4qTy7ZPqkcu9d90u5M/S40SBAaBAgNAgQGgQIDQKEBgFCgwDP0QbBg4etKPfXP/yt3N+YfWm59y/7erc/E/uWGw0ChAYBQoMAoUGA0CBAaBDgv/cH6KjP/i73n67b2rhN7Oouz94wdn25vzpuZLn7Sx163GgQIDQIEBoECA0ChAYBQoMAoUGARy4DdOC7S8v9wun3NW7fz3xlb38chjg3GgQIDQKEBgFCgwChQYDQIEBoEOA52j4y+eVNjdu708eVZ6/o3lzuPefX76NNWtQu91Z/f72z17nRIEBoECA0CBAaBAgNAoQGAUKDgPZF7VkeqoS1zzi53Oe/M3ePfv45D95Z7ofMWbJHP5/d50aDAKFBgNAgQGgQIDQIEBoECA0CPEcbBO2u+jXA05ftKPfHJnxV7q9vmVDu866Z1rj1LV9ZnmVg3GgQIDQIEBoECA0ChAYBQoMAXzc3CPp7e8t9+eXHlPubi9aW+w1j15f7c4/1NW6HzyiPMkBuNAgQGgQIDQKEBgFCgwChQYDQIMBrMh3ojxunlvuiJ18o956/dzZut91xT3l21IJl5c5/c6NBgNAgQGgQIDQIEBoECA0ChAYB3kfrQAe/9nm5TzntrnL/9tqXG7eDHugpz+5cUM40cKNBgNAgQGgQIDQIEBoECA0ChAYB3kcbhkaMHVvuZ366sXG7Z3z9vtnM2+8u91HveV/tv7jRIEBoECA0CBAaBAgNAoQGAV6TGYb6tmwp97mfnNe4PTLz6/LshIfWlPvmD0aVe//27eU+XLnRIEBoECA0CBAaBAgNAoQGAUKDAM/R9kMTF/Q1bn9eWT/nmnfcwnK/4JI7yn3020vLfbhyo0GA0CBAaBAgNAgQGgQIDQKEBgG+bo5drH5uarl/d3Xzr3xqtVqtVTvr53D3Xt/8nK29eHl5tpO50SBAaBAgNAgQGgQIDQKEBgFCgwDvo7GLyc/+XO7LZtSPXaceOLrcN57U3bgdtrg82tHcaBAgNAgQGgQIDQKEBgFCgwChQYD30dgtG245u9yXPPpiuT+zcXLj9vHFx5dne9f9Uu5DmRsNAoQGAUKDAKFBgNAgQGgQ4DWZfaTryCMatz/OnVSeHffR6nLffP4JA/lI/0vXtuZf6dRqtVpHvL+23L95uLfc7x//beM256Zp5dljHvff+0BBaBAgNAgQGgQIDQKEBgFCg4COfo7216yzGrffptT/hhy6sn47aNOJ7XIfOeX3cn/qlLcat2mjt5Vn5289qNwv615Y7ntiW/+Ocv9i+5hyP3XkAQP+s7dO2jngs0OdGw0ChAYBQoMAoUGA0CBAaBAgNAjo6K+bu/m7Hxq3q8ZsCn6Sf/uxd2vj9vyvFwQ/ydCydP2xjduYpw8uz3Z98OXe/jgxbjQIEBoECA0ChAYBQoMAoUGA0CCgo5+jbbi1+VcITZxdfzfiqvXN37vYarVaO7bX71UdPa/eu3v+bNz6vlpRnmX4caNBgNAgQGgQIDQIEBoECA0ChAYBHf0cDTqFGw0ChAYBQoMAoUGA0CBAaBAgNAgQGgQIDQKEBgFCgwChQYDQIEBoECA0CBAaBAgNAoQGAUKDAKFBgNAgQGgQIDQIEBoECA0ChAYBQoMAoUGA0CBAaBAgNAgQGgQIDQKEBgFCgwChQYDQIEBoECA0CBAaBAgNAoQGAUKDAKFBgNAgQGgQIDQIEBoECA0ChAYBQoMAoUGA0CDgH7MUyWKIGreuAAAAAElFTkSuQmCC\" y=\"-35.44\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_1\">\r\n",
       "    <g id=\"xtick_1\">\r\n",
       "     <g id=\"line2d_1\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L 0 3.5 \r\n",
       "\" id=\"mdf44cb8397\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"30.807857\" xlink:href=\"#mdf44cb8397\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_1\">\r\n",
       "      <!-- 0 -->\r\n",
       "      <g transform=\"translate(27.626607 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 2034 4250 \r\n",
       "Q 1547 4250 1301 3770 \r\n",
       "Q 1056 3291 1056 2328 \r\n",
       "Q 1056 1369 1301 889 \r\n",
       "Q 1547 409 2034 409 \r\n",
       "Q 2525 409 2770 889 \r\n",
       "Q 3016 1369 3016 2328 \r\n",
       "Q 3016 3291 2770 3770 \r\n",
       "Q 2525 4250 2034 4250 \r\n",
       "z\r\n",
       "M 2034 4750 \r\n",
       "Q 2819 4750 3233 4129 \r\n",
       "Q 3647 3509 3647 2328 \r\n",
       "Q 3647 1150 3233 529 \r\n",
       "Q 2819 -91 2034 -91 \r\n",
       "Q 1250 -91 836 529 \r\n",
       "Q 422 1150 422 2328 \r\n",
       "Q 422 3509 836 4129 \r\n",
       "Q 1250 4750 2034 4750 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-30\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_2\">\r\n",
       "     <g id=\"line2d_2\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"69.636429\" xlink:href=\"#mdf44cb8397\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_2\">\r\n",
       "      <!-- 5 -->\r\n",
       "      <g transform=\"translate(66.455179 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 691 4666 \r\n",
       "L 3169 4666 \r\n",
       "L 3169 4134 \r\n",
       "L 1269 4134 \r\n",
       "L 1269 2991 \r\n",
       "Q 1406 3038 1543 3061 \r\n",
       "Q 1681 3084 1819 3084 \r\n",
       "Q 2600 3084 3056 2656 \r\n",
       "Q 3513 2228 3513 1497 \r\n",
       "Q 3513 744 3044 326 \r\n",
       "Q 2575 -91 1722 -91 \r\n",
       "Q 1428 -91 1123 -41 \r\n",
       "Q 819 9 494 109 \r\n",
       "L 494 744 \r\n",
       "Q 775 591 1075 516 \r\n",
       "Q 1375 441 1709 441 \r\n",
       "Q 2250 441 2565 725 \r\n",
       "Q 2881 1009 2881 1497 \r\n",
       "Q 2881 1984 2565 2268 \r\n",
       "Q 2250 2553 1709 2553 \r\n",
       "Q 1456 2553 1204 2497 \r\n",
       "Q 953 2441 691 2322 \r\n",
       "L 691 4666 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-35\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_3\">\r\n",
       "     <g id=\"line2d_3\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"108.465\" xlink:href=\"#mdf44cb8397\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_3\">\r\n",
       "      <!-- 10 -->\r\n",
       "      <g transform=\"translate(102.1025 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 794 531 \r\n",
       "L 1825 531 \r\n",
       "L 1825 4091 \r\n",
       "L 703 3866 \r\n",
       "L 703 4441 \r\n",
       "L 1819 4666 \r\n",
       "L 2450 4666 \r\n",
       "L 2450 531 \r\n",
       "L 3481 531 \r\n",
       "L 3481 0 \r\n",
       "L 794 0 \r\n",
       "L 794 531 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-31\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_4\">\r\n",
       "     <g id=\"line2d_4\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"147.293571\" xlink:href=\"#mdf44cb8397\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_4\">\r\n",
       "      <!-- 15 -->\r\n",
       "      <g transform=\"translate(140.931071 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_5\">\r\n",
       "     <g id=\"line2d_5\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"186.122143\" xlink:href=\"#mdf44cb8397\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_5\">\r\n",
       "      <!-- 20 -->\r\n",
       "      <g transform=\"translate(179.759643 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 1228 531 \r\n",
       "L 3431 531 \r\n",
       "L 3431 0 \r\n",
       "L 469 0 \r\n",
       "L 469 531 \r\n",
       "Q 828 903 1448 1529 \r\n",
       "Q 2069 2156 2228 2338 \r\n",
       "Q 2531 2678 2651 2914 \r\n",
       "Q 2772 3150 2772 3378 \r\n",
       "Q 2772 3750 2511 3984 \r\n",
       "Q 2250 4219 1831 4219 \r\n",
       "Q 1534 4219 1204 4116 \r\n",
       "Q 875 4013 500 3803 \r\n",
       "L 500 4441 \r\n",
       "Q 881 4594 1212 4672 \r\n",
       "Q 1544 4750 1819 4750 \r\n",
       "Q 2544 4750 2975 4387 \r\n",
       "Q 3406 4025 3406 3419 \r\n",
       "Q 3406 3131 3298 2873 \r\n",
       "Q 3191 2616 2906 2266 \r\n",
       "Q 2828 2175 2409 1742 \r\n",
       "Q 1991 1309 1228 531 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-32\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_6\">\r\n",
       "     <g id=\"line2d_6\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"224.950714\" xlink:href=\"#mdf44cb8397\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_6\">\r\n",
       "      <!-- 25 -->\r\n",
       "      <g transform=\"translate(218.588214 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_2\">\r\n",
       "    <g id=\"ytick_1\">\r\n",
       "     <g id=\"line2d_7\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L -3.5 0 \r\n",
       "\" id=\"m771830bd31\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m771830bd31\" y=\"39.882857\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_7\">\r\n",
       "      <!-- 0 -->\r\n",
       "      <g transform=\"translate(13.5625 43.682076)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_2\">\r\n",
       "     <g id=\"line2d_8\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m771830bd31\" y=\"78.711429\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_8\">\r\n",
       "      <!-- 5 -->\r\n",
       "      <g transform=\"translate(13.5625 82.510647)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_3\">\r\n",
       "     <g id=\"line2d_9\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m771830bd31\" y=\"117.54\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_9\">\r\n",
       "      <!-- 10 -->\r\n",
       "      <g transform=\"translate(7.2 121.339219)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_4\">\r\n",
       "     <g id=\"line2d_10\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m771830bd31\" y=\"156.368571\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_10\">\r\n",
       "      <!-- 15 -->\r\n",
       "      <g transform=\"translate(7.2 160.16779)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_5\">\r\n",
       "     <g id=\"line2d_11\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m771830bd31\" y=\"195.197143\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_11\">\r\n",
       "      <!-- 20 -->\r\n",
       "      <g transform=\"translate(7.2 198.996362)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_6\">\r\n",
       "     <g id=\"line2d_12\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m771830bd31\" y=\"234.025714\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_12\">\r\n",
       "      <!-- 25 -->\r\n",
       "      <g transform=\"translate(7.2 237.824933)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_3\">\r\n",
       "    <path d=\"M 26.925 253.44 \r\n",
       "L 26.925 36 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_4\">\r\n",
       "    <path d=\"M 244.365 253.44 \r\n",
       "L 244.365 36 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_5\">\r\n",
       "    <path d=\"M 26.925 253.44 \r\n",
       "L 244.365 253.44 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_6\">\r\n",
       "    <path d=\"M 26.925 36 \r\n",
       "L 244.365 36 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "  </g>\r\n",
       "  <g id=\"text_13\">\r\n",
       "   <!-- Original -->\r\n",
       "   <g transform=\"translate(106.76625 16.318125)scale(0.12 -0.12)\">\r\n",
       "    <defs>\r\n",
       "     <path d=\"M 2522 4238 \r\n",
       "Q 1834 4238 1429 3725 \r\n",
       "Q 1025 3213 1025 2328 \r\n",
       "Q 1025 1447 1429 934 \r\n",
       "Q 1834 422 2522 422 \r\n",
       "Q 3209 422 3611 934 \r\n",
       "Q 4013 1447 4013 2328 \r\n",
       "Q 4013 3213 3611 3725 \r\n",
       "Q 3209 4238 2522 4238 \r\n",
       "z\r\n",
       "M 2522 4750 \r\n",
       "Q 3503 4750 4090 4092 \r\n",
       "Q 4678 3434 4678 2328 \r\n",
       "Q 4678 1225 4090 567 \r\n",
       "Q 3503 -91 2522 -91 \r\n",
       "Q 1538 -91 948 565 \r\n",
       "Q 359 1222 359 2328 \r\n",
       "Q 359 3434 948 4092 \r\n",
       "Q 1538 4750 2522 4750 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-4f\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 2631 2963 \r\n",
       "Q 2534 3019 2420 3045 \r\n",
       "Q 2306 3072 2169 3072 \r\n",
       "Q 1681 3072 1420 2755 \r\n",
       "Q 1159 2438 1159 1844 \r\n",
       "L 1159 0 \r\n",
       "L 581 0 \r\n",
       "L 581 3500 \r\n",
       "L 1159 3500 \r\n",
       "L 1159 2956 \r\n",
       "Q 1341 3275 1631 3429 \r\n",
       "Q 1922 3584 2338 3584 \r\n",
       "Q 2397 3584 2469 3576 \r\n",
       "Q 2541 3569 2628 3553 \r\n",
       "L 2631 2963 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-72\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 603 3500 \r\n",
       "L 1178 3500 \r\n",
       "L 1178 0 \r\n",
       "L 603 0 \r\n",
       "L 603 3500 \r\n",
       "z\r\n",
       "M 603 4863 \r\n",
       "L 1178 4863 \r\n",
       "L 1178 4134 \r\n",
       "L 603 4134 \r\n",
       "L 603 4863 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-69\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 2906 1791 \r\n",
       "Q 2906 2416 2648 2759 \r\n",
       "Q 2391 3103 1925 3103 \r\n",
       "Q 1463 3103 1205 2759 \r\n",
       "Q 947 2416 947 1791 \r\n",
       "Q 947 1169 1205 825 \r\n",
       "Q 1463 481 1925 481 \r\n",
       "Q 2391 481 2648 825 \r\n",
       "Q 2906 1169 2906 1791 \r\n",
       "z\r\n",
       "M 3481 434 \r\n",
       "Q 3481 -459 3084 -895 \r\n",
       "Q 2688 -1331 1869 -1331 \r\n",
       "Q 1566 -1331 1297 -1286 \r\n",
       "Q 1028 -1241 775 -1147 \r\n",
       "L 775 -588 \r\n",
       "Q 1028 -725 1275 -790 \r\n",
       "Q 1522 -856 1778 -856 \r\n",
       "Q 2344 -856 2625 -561 \r\n",
       "Q 2906 -266 2906 331 \r\n",
       "L 2906 616 \r\n",
       "Q 2728 306 2450 153 \r\n",
       "Q 2172 0 1784 0 \r\n",
       "Q 1141 0 747 490 \r\n",
       "Q 353 981 353 1791 \r\n",
       "Q 353 2603 747 3093 \r\n",
       "Q 1141 3584 1784 3584 \r\n",
       "Q 2172 3584 2450 3431 \r\n",
       "Q 2728 3278 2906 2969 \r\n",
       "L 2906 3500 \r\n",
       "L 3481 3500 \r\n",
       "L 3481 434 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-67\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 3513 2113 \r\n",
       "L 3513 0 \r\n",
       "L 2938 0 \r\n",
       "L 2938 2094 \r\n",
       "Q 2938 2591 2744 2837 \r\n",
       "Q 2550 3084 2163 3084 \r\n",
       "Q 1697 3084 1428 2787 \r\n",
       "Q 1159 2491 1159 1978 \r\n",
       "L 1159 0 \r\n",
       "L 581 0 \r\n",
       "L 581 3500 \r\n",
       "L 1159 3500 \r\n",
       "L 1159 2956 \r\n",
       "Q 1366 3272 1645 3428 \r\n",
       "Q 1925 3584 2291 3584 \r\n",
       "Q 2894 3584 3203 3211 \r\n",
       "Q 3513 2838 3513 2113 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-6e\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 2194 1759 \r\n",
       "Q 1497 1759 1228 1600 \r\n",
       "Q 959 1441 959 1056 \r\n",
       "Q 959 750 1161 570 \r\n",
       "Q 1363 391 1709 391 \r\n",
       "Q 2188 391 2477 730 \r\n",
       "Q 2766 1069 2766 1631 \r\n",
       "L 2766 1759 \r\n",
       "L 2194 1759 \r\n",
       "z\r\n",
       "M 3341 1997 \r\n",
       "L 3341 0 \r\n",
       "L 2766 0 \r\n",
       "L 2766 531 \r\n",
       "Q 2569 213 2275 61 \r\n",
       "Q 1981 -91 1556 -91 \r\n",
       "Q 1019 -91 701 211 \r\n",
       "Q 384 513 384 1019 \r\n",
       "Q 384 1609 779 1909 \r\n",
       "Q 1175 2209 1959 2209 \r\n",
       "L 2766 2209 \r\n",
       "L 2766 2266 \r\n",
       "Q 2766 2663 2505 2880 \r\n",
       "Q 2244 3097 1772 3097 \r\n",
       "Q 1472 3097 1187 3025 \r\n",
       "Q 903 2953 641 2809 \r\n",
       "L 641 3341 \r\n",
       "Q 956 3463 1253 3523 \r\n",
       "Q 1550 3584 1831 3584 \r\n",
       "Q 2591 3584 2966 3190 \r\n",
       "Q 3341 2797 3341 1997 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-61\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 603 4863 \r\n",
       "L 1178 4863 \r\n",
       "L 1178 0 \r\n",
       "L 603 0 \r\n",
       "L 603 4863 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-6c\" transform=\"scale(0.015625)\"/>\r\n",
       "    </defs>\r\n",
       "    <use xlink:href=\"#DejaVuSans-4f\"/>\r\n",
       "    <use x=\"78.710938\" xlink:href=\"#DejaVuSans-72\"/>\r\n",
       "    <use x=\"119.824219\" xlink:href=\"#DejaVuSans-69\"/>\r\n",
       "    <use x=\"147.607422\" xlink:href=\"#DejaVuSans-67\"/>\r\n",
       "    <use x=\"211.083984\" xlink:href=\"#DejaVuSans-69\"/>\r\n",
       "    <use x=\"238.867188\" xlink:href=\"#DejaVuSans-6e\"/>\r\n",
       "    <use x=\"302.246094\" xlink:href=\"#DejaVuSans-61\"/>\r\n",
       "    <use x=\"363.525391\" xlink:href=\"#DejaVuSans-6c\"/>\r\n",
       "   </g>\r\n",
       "  </g>\r\n",
       " </g>\r\n",
       " <defs>\r\n",
       "  <clipPath id=\"pb4f6d526a0\">\r\n",
       "   <rect height=\"217.44\" width=\"217.44\" x=\"26.925\" y=\"36\"/>\r\n",
       "  </clipPath>\r\n",
       " </defs>\r\n",
       "</svg>\r\n"
      ],
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n",
       "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n",
       "<svg height=\"277.318125pt\" version=\"1.1\" viewBox=\"0 0 251.565 277.318125\" width=\"251.565pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n",
       " <metadata>\r\n",
       "  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\r\n",
       "   <cc:Work>\r\n",
       "    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\r\n",
       "    <dc:date>2021-08-18T23:39:40.030072</dc:date>\r\n",
       "    <dc:format>image/svg+xml</dc:format>\r\n",
       "    <dc:creator>\r\n",
       "     <cc:Agent>\r\n",
       "      <dc:title>Matplotlib v3.4.3, https://matplotlib.org/</dc:title>\r\n",
       "     </cc:Agent>\r\n",
       "    </dc:creator>\r\n",
       "   </cc:Work>\r\n",
       "  </rdf:RDF>\r\n",
       " </metadata>\r\n",
       " <defs>\r\n",
       "  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\r\n",
       " </defs>\r\n",
       " <g id=\"figure_1\">\r\n",
       "  <g id=\"patch_1\">\r\n",
       "   <path d=\"M 0 277.318125 \r\n",
       "L 251.565 277.318125 \r\n",
       "L 251.565 0 \r\n",
       "L 0 0 \r\n",
       "z\r\n",
       "\" style=\"fill:none;\"/>\r\n",
       "  </g>\r\n",
       "  <g id=\"axes_1\">\r\n",
       "   <g id=\"patch_2\">\r\n",
       "    <path d=\"M 26.925 253.44 \r\n",
       "L 244.365 253.44 \r\n",
       "L 244.365 36 \r\n",
       "L 26.925 36 \r\n",
       "z\r\n",
       "\" style=\"fill:#ffffff;\"/>\r\n",
       "   </g>\r\n",
       "   <g clip-path=\"url(#p94758adb4c)\">\r\n",
       "    <image height=\"218\" id=\"image392c249c22\" transform=\"scale(1 -1)translate(0 -218)\" width=\"218\" x=\"26.925\" xlink:href=\"data:image/png;base64,\r\n",
       "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\" y=\"-35.44\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_1\">\r\n",
       "    <g id=\"xtick_1\">\r\n",
       "     <g id=\"line2d_1\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L 0 3.5 \r\n",
       "\" id=\"ma0d7025d94\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"30.807857\" xlink:href=\"#ma0d7025d94\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_1\">\r\n",
       "      <!-- 0 -->\r\n",
       "      <g transform=\"translate(27.626607 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 2034 4250 \r\n",
       "Q 1547 4250 1301 3770 \r\n",
       "Q 1056 3291 1056 2328 \r\n",
       "Q 1056 1369 1301 889 \r\n",
       "Q 1547 409 2034 409 \r\n",
       "Q 2525 409 2770 889 \r\n",
       "Q 3016 1369 3016 2328 \r\n",
       "Q 3016 3291 2770 3770 \r\n",
       "Q 2525 4250 2034 4250 \r\n",
       "z\r\n",
       "M 2034 4750 \r\n",
       "Q 2819 4750 3233 4129 \r\n",
       "Q 3647 3509 3647 2328 \r\n",
       "Q 3647 1150 3233 529 \r\n",
       "Q 2819 -91 2034 -91 \r\n",
       "Q 1250 -91 836 529 \r\n",
       "Q 422 1150 422 2328 \r\n",
       "Q 422 3509 836 4129 \r\n",
       "Q 1250 4750 2034 4750 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-30\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_2\">\r\n",
       "     <g id=\"line2d_2\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"69.636429\" xlink:href=\"#ma0d7025d94\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_2\">\r\n",
       "      <!-- 5 -->\r\n",
       "      <g transform=\"translate(66.455179 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 691 4666 \r\n",
       "L 3169 4666 \r\n",
       "L 3169 4134 \r\n",
       "L 1269 4134 \r\n",
       "L 1269 2991 \r\n",
       "Q 1406 3038 1543 3061 \r\n",
       "Q 1681 3084 1819 3084 \r\n",
       "Q 2600 3084 3056 2656 \r\n",
       "Q 3513 2228 3513 1497 \r\n",
       "Q 3513 744 3044 326 \r\n",
       "Q 2575 -91 1722 -91 \r\n",
       "Q 1428 -91 1123 -41 \r\n",
       "Q 819 9 494 109 \r\n",
       "L 494 744 \r\n",
       "Q 775 591 1075 516 \r\n",
       "Q 1375 441 1709 441 \r\n",
       "Q 2250 441 2565 725 \r\n",
       "Q 2881 1009 2881 1497 \r\n",
       "Q 2881 1984 2565 2268 \r\n",
       "Q 2250 2553 1709 2553 \r\n",
       "Q 1456 2553 1204 2497 \r\n",
       "Q 953 2441 691 2322 \r\n",
       "L 691 4666 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-35\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_3\">\r\n",
       "     <g id=\"line2d_3\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"108.465\" xlink:href=\"#ma0d7025d94\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_3\">\r\n",
       "      <!-- 10 -->\r\n",
       "      <g transform=\"translate(102.1025 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 794 531 \r\n",
       "L 1825 531 \r\n",
       "L 1825 4091 \r\n",
       "L 703 3866 \r\n",
       "L 703 4441 \r\n",
       "L 1819 4666 \r\n",
       "L 2450 4666 \r\n",
       "L 2450 531 \r\n",
       "L 3481 531 \r\n",
       "L 3481 0 \r\n",
       "L 794 0 \r\n",
       "L 794 531 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-31\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_4\">\r\n",
       "     <g id=\"line2d_4\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"147.293571\" xlink:href=\"#ma0d7025d94\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_4\">\r\n",
       "      <!-- 15 -->\r\n",
       "      <g transform=\"translate(140.931071 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_5\">\r\n",
       "     <g id=\"line2d_5\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"186.122143\" xlink:href=\"#ma0d7025d94\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_5\">\r\n",
       "      <!-- 20 -->\r\n",
       "      <g transform=\"translate(179.759643 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 1228 531 \r\n",
       "L 3431 531 \r\n",
       "L 3431 0 \r\n",
       "L 469 0 \r\n",
       "L 469 531 \r\n",
       "Q 828 903 1448 1529 \r\n",
       "Q 2069 2156 2228 2338 \r\n",
       "Q 2531 2678 2651 2914 \r\n",
       "Q 2772 3150 2772 3378 \r\n",
       "Q 2772 3750 2511 3984 \r\n",
       "Q 2250 4219 1831 4219 \r\n",
       "Q 1534 4219 1204 4116 \r\n",
       "Q 875 4013 500 3803 \r\n",
       "L 500 4441 \r\n",
       "Q 881 4594 1212 4672 \r\n",
       "Q 1544 4750 1819 4750 \r\n",
       "Q 2544 4750 2975 4387 \r\n",
       "Q 3406 4025 3406 3419 \r\n",
       "Q 3406 3131 3298 2873 \r\n",
       "Q 3191 2616 2906 2266 \r\n",
       "Q 2828 2175 2409 1742 \r\n",
       "Q 1991 1309 1228 531 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-32\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_6\">\r\n",
       "     <g id=\"line2d_6\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"224.950714\" xlink:href=\"#ma0d7025d94\" y=\"253.44\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_6\">\r\n",
       "      <!-- 25 -->\r\n",
       "      <g transform=\"translate(218.588214 268.038437)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_2\">\r\n",
       "    <g id=\"ytick_1\">\r\n",
       "     <g id=\"line2d_7\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L -3.5 0 \r\n",
       "\" id=\"mfe28ad0157\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mfe28ad0157\" y=\"39.882857\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_7\">\r\n",
       "      <!-- 0 -->\r\n",
       "      <g transform=\"translate(13.5625 43.682076)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_2\">\r\n",
       "     <g id=\"line2d_8\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mfe28ad0157\" y=\"78.711429\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_8\">\r\n",
       "      <!-- 5 -->\r\n",
       "      <g transform=\"translate(13.5625 82.510647)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_3\">\r\n",
       "     <g id=\"line2d_9\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mfe28ad0157\" y=\"117.54\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_9\">\r\n",
       "      <!-- 10 -->\r\n",
       "      <g transform=\"translate(7.2 121.339219)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_4\">\r\n",
       "     <g id=\"line2d_10\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mfe28ad0157\" y=\"156.368571\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_10\">\r\n",
       "      <!-- 15 -->\r\n",
       "      <g transform=\"translate(7.2 160.16779)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_5\">\r\n",
       "     <g id=\"line2d_11\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mfe28ad0157\" y=\"195.197143\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_11\">\r\n",
       "      <!-- 20 -->\r\n",
       "      <g transform=\"translate(7.2 198.996362)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_6\">\r\n",
       "     <g id=\"line2d_12\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mfe28ad0157\" y=\"234.025714\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_12\">\r\n",
       "      <!-- 25 -->\r\n",
       "      <g transform=\"translate(7.2 237.824933)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_3\">\r\n",
       "    <path d=\"M 26.925 253.44 \r\n",
       "L 26.925 36 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_4\">\r\n",
       "    <path d=\"M 244.365 253.44 \r\n",
       "L 244.365 36 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_5\">\r\n",
       "    <path d=\"M 26.925 253.44 \r\n",
       "L 244.365 253.44 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_6\">\r\n",
       "    <path d=\"M 26.925 36 \r\n",
       "L 244.365 36 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "  </g>\r\n",
       "  <g id=\"text_13\">\r\n",
       "   <!-- Reconstructed -->\r\n",
       "   <g transform=\"translate(86.982188 16.318125)scale(0.12 -0.12)\">\r\n",
       "    <defs>\r\n",
       "     <path d=\"M 2841 2188 \r\n",
       "Q 3044 2119 3236 1894 \r\n",
       "Q 3428 1669 3622 1275 \r\n",
       "L 4263 0 \r\n",
       "L 3584 0 \r\n",
       "L 2988 1197 \r\n",
       "Q 2756 1666 2539 1819 \r\n",
       "Q 2322 1972 1947 1972 \r\n",
       "L 1259 1972 \r\n",
       "L 1259 0 \r\n",
       "L 628 0 \r\n",
       "L 628 4666 \r\n",
       "L 2053 4666 \r\n",
       "Q 2853 4666 3247 4331 \r\n",
       "Q 3641 3997 3641 3322 \r\n",
       "Q 3641 2881 3436 2590 \r\n",
       "Q 3231 2300 2841 2188 \r\n",
       "z\r\n",
       "M 1259 4147 \r\n",
       "L 1259 2491 \r\n",
       "L 2053 2491 \r\n",
       "Q 2509 2491 2742 2702 \r\n",
       "Q 2975 2913 2975 3322 \r\n",
       "Q 2975 3731 2742 3939 \r\n",
       "Q 2509 4147 2053 4147 \r\n",
       "L 1259 4147 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-52\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 3597 1894 \r\n",
       "L 3597 1613 \r\n",
       "L 953 1613 \r\n",
       "Q 991 1019 1311 708 \r\n",
       "Q 1631 397 2203 397 \r\n",
       "Q 2534 397 2845 478 \r\n",
       "Q 3156 559 3463 722 \r\n",
       "L 3463 178 \r\n",
       "Q 3153 47 2828 -22 \r\n",
       "Q 2503 -91 2169 -91 \r\n",
       "Q 1331 -91 842 396 \r\n",
       "Q 353 884 353 1716 \r\n",
       "Q 353 2575 817 3079 \r\n",
       "Q 1281 3584 2069 3584 \r\n",
       "Q 2775 3584 3186 3129 \r\n",
       "Q 3597 2675 3597 1894 \r\n",
       "z\r\n",
       "M 3022 2063 \r\n",
       "Q 3016 2534 2758 2815 \r\n",
       "Q 2500 3097 2075 3097 \r\n",
       "Q 1594 3097 1305 2825 \r\n",
       "Q 1016 2553 972 2059 \r\n",
       "L 3022 2063 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-65\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 3122 3366 \r\n",
       "L 3122 2828 \r\n",
       "Q 2878 2963 2633 3030 \r\n",
       "Q 2388 3097 2138 3097 \r\n",
       "Q 1578 3097 1268 2742 \r\n",
       "Q 959 2388 959 1747 \r\n",
       "Q 959 1106 1268 751 \r\n",
       "Q 1578 397 2138 397 \r\n",
       "Q 2388 397 2633 464 \r\n",
       "Q 2878 531 3122 666 \r\n",
       "L 3122 134 \r\n",
       "Q 2881 22 2623 -34 \r\n",
       "Q 2366 -91 2075 -91 \r\n",
       "Q 1284 -91 818 406 \r\n",
       "Q 353 903 353 1747 \r\n",
       "Q 353 2603 823 3093 \r\n",
       "Q 1294 3584 2113 3584 \r\n",
       "Q 2378 3584 2631 3529 \r\n",
       "Q 2884 3475 3122 3366 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-63\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 1959 3097 \r\n",
       "Q 1497 3097 1228 2736 \r\n",
       "Q 959 2375 959 1747 \r\n",
       "Q 959 1119 1226 758 \r\n",
       "Q 1494 397 1959 397 \r\n",
       "Q 2419 397 2687 759 \r\n",
       "Q 2956 1122 2956 1747 \r\n",
       "Q 2956 2369 2687 2733 \r\n",
       "Q 2419 3097 1959 3097 \r\n",
       "z\r\n",
       "M 1959 3584 \r\n",
       "Q 2709 3584 3137 3096 \r\n",
       "Q 3566 2609 3566 1747 \r\n",
       "Q 3566 888 3137 398 \r\n",
       "Q 2709 -91 1959 -91 \r\n",
       "Q 1206 -91 779 398 \r\n",
       "Q 353 888 353 1747 \r\n",
       "Q 353 2609 779 3096 \r\n",
       "Q 1206 3584 1959 3584 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-6f\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 3513 2113 \r\n",
       "L 3513 0 \r\n",
       "L 2938 0 \r\n",
       "L 2938 2094 \r\n",
       "Q 2938 2591 2744 2837 \r\n",
       "Q 2550 3084 2163 3084 \r\n",
       "Q 1697 3084 1428 2787 \r\n",
       "Q 1159 2491 1159 1978 \r\n",
       "L 1159 0 \r\n",
       "L 581 0 \r\n",
       "L 581 3500 \r\n",
       "L 1159 3500 \r\n",
       "L 1159 2956 \r\n",
       "Q 1366 3272 1645 3428 \r\n",
       "Q 1925 3584 2291 3584 \r\n",
       "Q 2894 3584 3203 3211 \r\n",
       "Q 3513 2838 3513 2113 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-6e\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 2834 3397 \r\n",
       "L 2834 2853 \r\n",
       "Q 2591 2978 2328 3040 \r\n",
       "Q 2066 3103 1784 3103 \r\n",
       "Q 1356 3103 1142 2972 \r\n",
       "Q 928 2841 928 2578 \r\n",
       "Q 928 2378 1081 2264 \r\n",
       "Q 1234 2150 1697 2047 \r\n",
       "L 1894 2003 \r\n",
       "Q 2506 1872 2764 1633 \r\n",
       "Q 3022 1394 3022 966 \r\n",
       "Q 3022 478 2636 193 \r\n",
       "Q 2250 -91 1575 -91 \r\n",
       "Q 1294 -91 989 -36 \r\n",
       "Q 684 19 347 128 \r\n",
       "L 347 722 \r\n",
       "Q 666 556 975 473 \r\n",
       "Q 1284 391 1588 391 \r\n",
       "Q 1994 391 2212 530 \r\n",
       "Q 2431 669 2431 922 \r\n",
       "Q 2431 1156 2273 1281 \r\n",
       "Q 2116 1406 1581 1522 \r\n",
       "L 1381 1569 \r\n",
       "Q 847 1681 609 1914 \r\n",
       "Q 372 2147 372 2553 \r\n",
       "Q 372 3047 722 3315 \r\n",
       "Q 1072 3584 1716 3584 \r\n",
       "Q 2034 3584 2315 3537 \r\n",
       "Q 2597 3491 2834 3397 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-73\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 1172 4494 \r\n",
       "L 1172 3500 \r\n",
       "L 2356 3500 \r\n",
       "L 2356 3053 \r\n",
       "L 1172 3053 \r\n",
       "L 1172 1153 \r\n",
       "Q 1172 725 1289 603 \r\n",
       "Q 1406 481 1766 481 \r\n",
       "L 2356 481 \r\n",
       "L 2356 0 \r\n",
       "L 1766 0 \r\n",
       "Q 1100 0 847 248 \r\n",
       "Q 594 497 594 1153 \r\n",
       "L 594 3053 \r\n",
       "L 172 3053 \r\n",
       "L 172 3500 \r\n",
       "L 594 3500 \r\n",
       "L 594 4494 \r\n",
       "L 1172 4494 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-74\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 2631 2963 \r\n",
       "Q 2534 3019 2420 3045 \r\n",
       "Q 2306 3072 2169 3072 \r\n",
       "Q 1681 3072 1420 2755 \r\n",
       "Q 1159 2438 1159 1844 \r\n",
       "L 1159 0 \r\n",
       "L 581 0 \r\n",
       "L 581 3500 \r\n",
       "L 1159 3500 \r\n",
       "L 1159 2956 \r\n",
       "Q 1341 3275 1631 3429 \r\n",
       "Q 1922 3584 2338 3584 \r\n",
       "Q 2397 3584 2469 3576 \r\n",
       "Q 2541 3569 2628 3553 \r\n",
       "L 2631 2963 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-72\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 544 1381 \r\n",
       "L 544 3500 \r\n",
       "L 1119 3500 \r\n",
       "L 1119 1403 \r\n",
       "Q 1119 906 1312 657 \r\n",
       "Q 1506 409 1894 409 \r\n",
       "Q 2359 409 2629 706 \r\n",
       "Q 2900 1003 2900 1516 \r\n",
       "L 2900 3500 \r\n",
       "L 3475 3500 \r\n",
       "L 3475 0 \r\n",
       "L 2900 0 \r\n",
       "L 2900 538 \r\n",
       "Q 2691 219 2414 64 \r\n",
       "Q 2138 -91 1772 -91 \r\n",
       "Q 1169 -91 856 284 \r\n",
       "Q 544 659 544 1381 \r\n",
       "z\r\n",
       "M 1991 3584 \r\n",
       "L 1991 3584 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-75\" transform=\"scale(0.015625)\"/>\r\n",
       "     <path d=\"M 2906 2969 \r\n",
       "L 2906 4863 \r\n",
       "L 3481 4863 \r\n",
       "L 3481 0 \r\n",
       "L 2906 0 \r\n",
       "L 2906 525 \r\n",
       "Q 2725 213 2448 61 \r\n",
       "Q 2172 -91 1784 -91 \r\n",
       "Q 1150 -91 751 415 \r\n",
       "Q 353 922 353 1747 \r\n",
       "Q 353 2572 751 3078 \r\n",
       "Q 1150 3584 1784 3584 \r\n",
       "Q 2172 3584 2448 3432 \r\n",
       "Q 2725 3281 2906 2969 \r\n",
       "z\r\n",
       "M 947 1747 \r\n",
       "Q 947 1113 1208 752 \r\n",
       "Q 1469 391 1925 391 \r\n",
       "Q 2381 391 2643 752 \r\n",
       "Q 2906 1113 2906 1747 \r\n",
       "Q 2906 2381 2643 2742 \r\n",
       "Q 2381 3103 1925 3103 \r\n",
       "Q 1469 3103 1208 2742 \r\n",
       "Q 947 2381 947 1747 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-64\" transform=\"scale(0.015625)\"/>\r\n",
       "    </defs>\r\n",
       "    <use xlink:href=\"#DejaVuSans-52\"/>\r\n",
       "    <use x=\"64.982422\" xlink:href=\"#DejaVuSans-65\"/>\r\n",
       "    <use x=\"126.505859\" xlink:href=\"#DejaVuSans-63\"/>\r\n",
       "    <use x=\"181.486328\" xlink:href=\"#DejaVuSans-6f\"/>\r\n",
       "    <use x=\"242.667969\" xlink:href=\"#DejaVuSans-6e\"/>\r\n",
       "    <use x=\"306.046875\" xlink:href=\"#DejaVuSans-73\"/>\r\n",
       "    <use x=\"358.146484\" xlink:href=\"#DejaVuSans-74\"/>\r\n",
       "    <use x=\"397.355469\" xlink:href=\"#DejaVuSans-72\"/>\r\n",
       "    <use x=\"438.46875\" xlink:href=\"#DejaVuSans-75\"/>\r\n",
       "    <use x=\"501.847656\" xlink:href=\"#DejaVuSans-63\"/>\r\n",
       "    <use x=\"556.828125\" xlink:href=\"#DejaVuSans-74\"/>\r\n",
       "    <use x=\"596.037109\" xlink:href=\"#DejaVuSans-65\"/>\r\n",
       "    <use x=\"657.560547\" xlink:href=\"#DejaVuSans-64\"/>\r\n",
       "   </g>\r\n",
       "  </g>\r\n",
       " </g>\r\n",
       " <defs>\r\n",
       "  <clipPath id=\"p94758adb4c\">\r\n",
       "   <rect height=\"217.44\" width=\"217.44\" x=\"26.925\" y=\"36\"/>\r\n",
       "  </clipPath>\r\n",
       " </defs>\r\n",
       "</svg>\r\n"
      ],
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# set the idx_selected to see the image in the batch you want to see\n",
    "idx_selected = 0\n",
    "\n",
    "show_image(x, idx=idx_selected, title='Original') \n",
    "show_image(x_hat, idx=idx_selected, title='Reconstructed')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can input a integer in \\[0, 9999\\] in the *text box*, or drag the *slider bar*, and the value will be the index for the sample which will be shown with title 'orignal image', and the corresponding reconstructed image will also be shwon.  \n",
    "\n",
    "You might see some images are not reconstructed well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7f9eb5021fe24503b6add8f77d69340b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "BoundedIntText(value=1, max=9999)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b10e3cb18e4b458ea73279d770af74b1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=1, description='i', max=9999), Output()), _dom_classes=('widget-interact…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<function __main__.plot_x(i)>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from ipywidgets import interact, interactive, fixed, interact_manual\n",
    "import ipywidgets as widgets\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "def plot_x(i):\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        x=test_dataset[i][0]\n",
    "        x = x.view(-1, x_dim)\n",
    "        x = x.to(DEVICE)\n",
    "        \n",
    "        x_hat, _, _ = model(x)\n",
    "\n",
    "        fig = plt.figure(figsize=(8,8))\n",
    "        plt.subplot(1,2,1)\n",
    "        plt.title('Original image')\n",
    "        plt.imshow(x.view(28,28).cpu().numpy())\n",
    "        plt.subplot(1,2,2)\n",
    "        plt.title('reconstructed image')\n",
    "        plt.imshow(x_hat[0].view(28,28).cpu().numpy())\n",
    "        # plt.imshow(x_hat[0].view(28,28).cpu().numpy(), cmap=\"gray\")\n",
    "        plt.show()\n",
    "\n",
    "widget_a = widgets.BoundedIntText(value=1, min=0, max=9999, step=1)\n",
    "widget_b = widgets.IntSlider(value=1, min=0, max=9999, step=1)\n",
    "mylink = widgets.jslink((widget_a, 'value'), (widget_b, 'value'))\n",
    "\n",
    "display(widget_a)\n",
    "interact(plot_x, i = widget_b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate samples by randomly sampling $z$ values from $p_{Z}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.eval()\n",
    "\n",
    "with torch.no_grad():\n",
    "    noise = torch.randn(batch_size, latent_dim).to(DEVICE)\n",
    "    generated_images = decoder(noise)\n",
    "\n",
    "save_image(generated_images.view(-1, 1, 28, 28), 'generated_sample.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "from IPython.core.display import HTML \n",
    "Image(filename =r\"./generated_sample.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can view the single generated image by changing the value of the argument *idx*.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n",
       "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n",
       "<svg height=\"248.518125pt\" version=\"1.1\" viewBox=\"0 0 251.565 248.518125\" width=\"251.565pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n",
       " <metadata>\r\n",
       "  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\r\n",
       "   <cc:Work>\r\n",
       "    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\r\n",
       "    <dc:date>2021-08-18T23:39:41.024788</dc:date>\r\n",
       "    <dc:format>image/svg+xml</dc:format>\r\n",
       "    <dc:creator>\r\n",
       "     <cc:Agent>\r\n",
       "      <dc:title>Matplotlib v3.4.3, https://matplotlib.org/</dc:title>\r\n",
       "     </cc:Agent>\r\n",
       "    </dc:creator>\r\n",
       "   </cc:Work>\r\n",
       "  </rdf:RDF>\r\n",
       " </metadata>\r\n",
       " <defs>\r\n",
       "  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\r\n",
       " </defs>\r\n",
       " <g id=\"figure_1\">\r\n",
       "  <g id=\"patch_1\">\r\n",
       "   <path d=\"M 0 248.518125 \r\n",
       "L 251.565 248.518125 \r\n",
       "L 251.565 0 \r\n",
       "L 0 0 \r\n",
       "z\r\n",
       "\" style=\"fill:none;\"/>\r\n",
       "  </g>\r\n",
       "  <g id=\"axes_1\">\r\n",
       "   <g id=\"patch_2\">\r\n",
       "    <path d=\"M 26.925 224.64 \r\n",
       "L 244.365 224.64 \r\n",
       "L 244.365 7.2 \r\n",
       "L 26.925 7.2 \r\n",
       "z\r\n",
       "\" style=\"fill:#ffffff;\"/>\r\n",
       "   </g>\r\n",
       "   <g clip-path=\"url(#pdbc2e53f41)\">\r\n",
       "    <image height=\"218\" id=\"image7a33983e6f\" transform=\"scale(1 -1)translate(0 -218)\" width=\"218\" x=\"26.925\" xlink:href=\"data:image/png;base64,\r\n",
       "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\" y=\"-6.64\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_1\">\r\n",
       "    <g id=\"xtick_1\">\r\n",
       "     <g id=\"line2d_1\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L 0 3.5 \r\n",
       "\" id=\"m3a39eae4b6\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"30.807857\" xlink:href=\"#m3a39eae4b6\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_1\">\r\n",
       "      <!-- 0 -->\r\n",
       "      <g transform=\"translate(27.626607 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 2034 4250 \r\n",
       "Q 1547 4250 1301 3770 \r\n",
       "Q 1056 3291 1056 2328 \r\n",
       "Q 1056 1369 1301 889 \r\n",
       "Q 1547 409 2034 409 \r\n",
       "Q 2525 409 2770 889 \r\n",
       "Q 3016 1369 3016 2328 \r\n",
       "Q 3016 3291 2770 3770 \r\n",
       "Q 2525 4250 2034 4250 \r\n",
       "z\r\n",
       "M 2034 4750 \r\n",
       "Q 2819 4750 3233 4129 \r\n",
       "Q 3647 3509 3647 2328 \r\n",
       "Q 3647 1150 3233 529 \r\n",
       "Q 2819 -91 2034 -91 \r\n",
       "Q 1250 -91 836 529 \r\n",
       "Q 422 1150 422 2328 \r\n",
       "Q 422 3509 836 4129 \r\n",
       "Q 1250 4750 2034 4750 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-30\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_2\">\r\n",
       "     <g id=\"line2d_2\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"69.636429\" xlink:href=\"#m3a39eae4b6\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_2\">\r\n",
       "      <!-- 5 -->\r\n",
       "      <g transform=\"translate(66.455179 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 691 4666 \r\n",
       "L 3169 4666 \r\n",
       "L 3169 4134 \r\n",
       "L 1269 4134 \r\n",
       "L 1269 2991 \r\n",
       "Q 1406 3038 1543 3061 \r\n",
       "Q 1681 3084 1819 3084 \r\n",
       "Q 2600 3084 3056 2656 \r\n",
       "Q 3513 2228 3513 1497 \r\n",
       "Q 3513 744 3044 326 \r\n",
       "Q 2575 -91 1722 -91 \r\n",
       "Q 1428 -91 1123 -41 \r\n",
       "Q 819 9 494 109 \r\n",
       "L 494 744 \r\n",
       "Q 775 591 1075 516 \r\n",
       "Q 1375 441 1709 441 \r\n",
       "Q 2250 441 2565 725 \r\n",
       "Q 2881 1009 2881 1497 \r\n",
       "Q 2881 1984 2565 2268 \r\n",
       "Q 2250 2553 1709 2553 \r\n",
       "Q 1456 2553 1204 2497 \r\n",
       "Q 953 2441 691 2322 \r\n",
       "L 691 4666 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-35\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_3\">\r\n",
       "     <g id=\"line2d_3\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"108.465\" xlink:href=\"#m3a39eae4b6\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_3\">\r\n",
       "      <!-- 10 -->\r\n",
       "      <g transform=\"translate(102.1025 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 794 531 \r\n",
       "L 1825 531 \r\n",
       "L 1825 4091 \r\n",
       "L 703 3866 \r\n",
       "L 703 4441 \r\n",
       "L 1819 4666 \r\n",
       "L 2450 4666 \r\n",
       "L 2450 531 \r\n",
       "L 3481 531 \r\n",
       "L 3481 0 \r\n",
       "L 794 0 \r\n",
       "L 794 531 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-31\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_4\">\r\n",
       "     <g id=\"line2d_4\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"147.293571\" xlink:href=\"#m3a39eae4b6\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_4\">\r\n",
       "      <!-- 15 -->\r\n",
       "      <g transform=\"translate(140.931071 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_5\">\r\n",
       "     <g id=\"line2d_5\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"186.122143\" xlink:href=\"#m3a39eae4b6\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_5\">\r\n",
       "      <!-- 20 -->\r\n",
       "      <g transform=\"translate(179.759643 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 1228 531 \r\n",
       "L 3431 531 \r\n",
       "L 3431 0 \r\n",
       "L 469 0 \r\n",
       "L 469 531 \r\n",
       "Q 828 903 1448 1529 \r\n",
       "Q 2069 2156 2228 2338 \r\n",
       "Q 2531 2678 2651 2914 \r\n",
       "Q 2772 3150 2772 3378 \r\n",
       "Q 2772 3750 2511 3984 \r\n",
       "Q 2250 4219 1831 4219 \r\n",
       "Q 1534 4219 1204 4116 \r\n",
       "Q 875 4013 500 3803 \r\n",
       "L 500 4441 \r\n",
       "Q 881 4594 1212 4672 \r\n",
       "Q 1544 4750 1819 4750 \r\n",
       "Q 2544 4750 2975 4387 \r\n",
       "Q 3406 4025 3406 3419 \r\n",
       "Q 3406 3131 3298 2873 \r\n",
       "Q 3191 2616 2906 2266 \r\n",
       "Q 2828 2175 2409 1742 \r\n",
       "Q 1991 1309 1228 531 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-32\" transform=\"scale(0.015625)\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_6\">\r\n",
       "     <g id=\"line2d_6\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"224.950714\" xlink:href=\"#m3a39eae4b6\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_6\">\r\n",
       "      <!-- 25 -->\r\n",
       "      <g transform=\"translate(218.588214 239.238437)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_2\">\r\n",
       "    <g id=\"ytick_1\">\r\n",
       "     <g id=\"line2d_7\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L -3.5 0 \r\n",
       "\" id=\"mb7a2fec682\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mb7a2fec682\" y=\"11.082857\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_7\">\r\n",
       "      <!-- 0 -->\r\n",
       "      <g transform=\"translate(13.5625 14.882076)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_2\">\r\n",
       "     <g id=\"line2d_8\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mb7a2fec682\" y=\"49.911429\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_8\">\r\n",
       "      <!-- 5 -->\r\n",
       "      <g transform=\"translate(13.5625 53.710647)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_3\">\r\n",
       "     <g id=\"line2d_9\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mb7a2fec682\" y=\"88.74\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_9\">\r\n",
       "      <!-- 10 -->\r\n",
       "      <g transform=\"translate(7.2 92.539219)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_4\">\r\n",
       "     <g id=\"line2d_10\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mb7a2fec682\" y=\"127.568571\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_10\">\r\n",
       "      <!-- 15 -->\r\n",
       "      <g transform=\"translate(7.2 131.36779)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_5\">\r\n",
       "     <g id=\"line2d_11\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mb7a2fec682\" y=\"166.397143\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_11\">\r\n",
       "      <!-- 20 -->\r\n",
       "      <g transform=\"translate(7.2 170.196362)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_6\">\r\n",
       "     <g id=\"line2d_12\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#mb7a2fec682\" y=\"205.225714\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_12\">\r\n",
       "      <!-- 25 -->\r\n",
       "      <g transform=\"translate(7.2 209.024933)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_3\">\r\n",
       "    <path d=\"M 26.925 224.64 \r\n",
       "L 26.925 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_4\">\r\n",
       "    <path d=\"M 244.365 224.64 \r\n",
       "L 244.365 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_5\">\r\n",
       "    <path d=\"M 26.925 224.64 \r\n",
       "L 244.365 224.64 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_6\">\r\n",
       "    <path d=\"M 26.925 7.2 \r\n",
       "L 244.365 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "  </g>\r\n",
       " </g>\r\n",
       " <defs>\r\n",
       "  <clipPath id=\"pdbc2e53f41\">\r\n",
       "   <rect height=\"217.44\" width=\"217.44\" x=\"26.925\" y=\"7.2\"/>\r\n",
       "  </clipPath>\r\n",
       " </defs>\r\n",
       "</svg>\r\n"
      ],
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_image(generated_images, idx=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "**Exercise** \n",
    "\n",
    "What is the relationship between the divergence term in $L_{\\text{VAE}}$ and $I(\\hat{Z}, X)$?  \n",
    "\n",
    "What will happen if the model is sufficiently flexible and the $L_{\\text{VAE}}$ achieves optimal value?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try use stronger Encoder and Decoder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Balancing the two terms in $L_{\\text{VAE}}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the loss $L_{\\beta}$\n",
    "$$L_{\\beta} := E[ - p_{\\hat{X}|Z}(X|\\hat{Z})] + \\beta D(P_{\\hat{Z}|X} || P_{Z}|P_{X}).$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "distanglement and informative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# InfoVAE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "72988f6554239d4d9a59030431e3f9673f71a93641bf30a7410994f37c695aee"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
